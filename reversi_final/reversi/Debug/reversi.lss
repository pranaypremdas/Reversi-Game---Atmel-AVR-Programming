
reversi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  0000179e  00001832  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000179e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016e  00800134  00800134  00001866  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001866  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a82  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000114b  00000000  00000000  0000466e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a98  00000000  00000000  000057b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000818  00000000  00000000  00007254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d1c  00000000  00000000  00007a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d50  00000000  00000000  00008788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0000a4d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__ctors_end>
       4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
       8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
       c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      10:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      14:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_5>
      18:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      1c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      20:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      24:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      28:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      2c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      30:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      34:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      38:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      3c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      40:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__vector_16>
      44:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      48:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      4c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      50:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__vector_20>
      54:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_21>
      58:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      5c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      60:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      64:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      68:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      6c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      70:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      74:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      78:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	47 72       	andi	r20, 0x27	; 39
      7e:	65 65       	ori	r22, 0x55	; 85
      80:	6e 20       	and	r6, r14
      82:	53 63       	ori	r21, 0x33	; 51
      84:	6f 72       	andi	r22, 0x2F	; 47
      86:	65 3a       	cpi	r22, 0xA5	; 165
      88:	25 33       	cpi	r18, 0x35	; 53
      8a:	64 00       	.word	0x0064	; ????

0000008c <__c.2183>:
      8c:	47 72 65 65 6e 20 53 63 6f 72 65 3a 25 33 64 00     Green Score:%3d.

0000009c <__c.2181>:
      9c:	52 65 64 20 53 63 6f 72 65 3a 20 20 25 33 64 00     Red Score:  %3d.

000000ac <__c.2179>:
      ac:	52 65 64 20 53 63 6f 72 65 3a 20 20 25 33 64 00     Red Score:  %3d.

000000bc <__c.2285>:
      bc:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      cc:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000da <__c.2283>:
      da:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000e4 <__c.2259>:
      e4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
      f4:	6f 6a 65 63 74 20 62 79 20 50 72 61 6e 61 79 2c     oject by Pranay,
     104:	20 53 74 75 64 65 6e 74 20 4e 75 6d 62 65 72 3a      Student Number:
     114:	20 34 36 34 34 34 36 37 35 00                        46444675.

0000011e <__c.2257>:
     11e:	52 65 76 65 72 73 69 00                             Reversi.

00000126 <__c.2054>:
     126:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000012d <__c.2040>:
     12d:	1b 5b 32 4a 00                                      .[2J.

00000132 <__c.2025>:
     132:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

0000013c <__ctors_end>:
     13c:	11 24       	eor	r1, r1
     13e:	1f be       	out	0x3f, r1	; 63
     140:	cf ef       	ldi	r28, 0xFF	; 255
     142:	d8 e0       	ldi	r29, 0x08	; 8
     144:	de bf       	out	0x3e, r29	; 62
     146:	cd bf       	out	0x3d, r28	; 61

00000148 <__do_copy_data>:
     148:	11 e0       	ldi	r17, 0x01	; 1
     14a:	a0 e0       	ldi	r26, 0x00	; 0
     14c:	b1 e0       	ldi	r27, 0x01	; 1
     14e:	ee e9       	ldi	r30, 0x9E	; 158
     150:	f7 e1       	ldi	r31, 0x17	; 23
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x10>
     154:	05 90       	lpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a4 33       	cpi	r26, 0x34	; 52
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0xc>

0000015e <__do_clear_bss>:
     15e:	22 e0       	ldi	r18, 0x02	; 2
     160:	a4 e3       	ldi	r26, 0x34	; 52
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a2 3a       	cpi	r26, 0xA2	; 162
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	0e 94 65 06 	call	0xcca	; 0xcca <main>
     172:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <_exit>

00000176 <__bad_interrupt>:
     176:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017a <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT10 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     17a:	e8 e6       	ldi	r30, 0x68	; 104
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	80 81       	ld	r24, Z
     180:	82 60       	ori	r24, 0x02	; 2
     182:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     184:	8b b3       	in	r24, 0x1b	; 27
     186:	82 60       	ori	r24, 0x02	; 2
     188:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10);	
     18a:	ec e6       	ldi	r30, 0x6C	; 108
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	87 60       	ori	r24, 0x07	; 7
     192:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     194:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end>
     198:	08 95       	ret

0000019a <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     19a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     19e:	18 16       	cp	r1, r24
     1a0:	14 f5       	brge	.+68     	; 0x1e6 <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     1a2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     1a6:	6f b7       	in	r22, 0x3f	; 63
		cli();
     1a8:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <button_pushed+0x26>
			button_queue[i-1] = button_queue[i];
     1ae:	f9 01       	movw	r30, r18
     1b0:	eb 5c       	subi	r30, 0xCB	; 203
     1b2:	fe 4f       	sbci	r31, 0xFE	; 254
     1b4:	40 81       	ld	r20, Z
     1b6:	f9 01       	movw	r30, r18
     1b8:	ec 5c       	subi	r30, 0xCC	; 204
     1ba:	fe 4f       	sbci	r31, 0xFE	; 254
     1bc:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     1be:	9f 5f       	subi	r25, 0xFF	; 255
     1c0:	29 2f       	mov	r18, r25
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <__data_end>
     1c8:	04 2e       	mov	r0, r20
     1ca:	00 0c       	add	r0, r0
     1cc:	55 0b       	sbc	r21, r21
     1ce:	24 17       	cp	r18, r20
     1d0:	35 07       	cpc	r19, r21
     1d2:	6c f3       	brlt	.-38     	; 0x1ae <button_pushed+0x14>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     1d4:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <__data_end>
     1d8:	91 50       	subi	r25, 0x01	; 1
     1da:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <__data_end>
		
		if(interrupts_were_enabled) {
     1de:	66 23       	and	r22, r22
     1e0:	1c f4       	brge	.+6      	; 0x1e8 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     1e2:	78 94       	sei
     1e4:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     1e8:	08 95       	ret

000001ea <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	2f 93       	push	r18
     1f6:	3f 93       	push	r19
     1f8:	4f 93       	push	r20
     1fa:	8f 93       	push	r24
     1fc:	9f 93       	push	r25
     1fe:	ef 93       	push	r30
     200:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x07;
     202:	43 b1       	in	r20, 0x03	; 3
     204:	47 70       	andi	r20, 0x07	; 7
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=2; pin++) {
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	26 c0       	rjmp	.+76     	; 0x256 <__vector_5+0x6c>
		if(queue_length < BUTTON_QUEUE_SIZE && 
     20a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <__data_end>
     20e:	94 30       	cpi	r25, 0x04	; 4
     210:	0c f5       	brge	.+66     	; 0x254 <__vector_5+0x6a>
     212:	24 2f       	mov	r18, r20
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	08 2e       	mov	r0, r24
     218:	02 c0       	rjmp	.+4      	; 0x21e <__vector_5+0x34>
     21a:	35 95       	asr	r19
     21c:	27 95       	ror	r18
     21e:	0a 94       	dec	r0
     220:	e2 f7       	brpl	.-8      	; 0x21a <__vector_5+0x30>
     222:	20 ff       	sbrs	r18, 0
     224:	17 c0       	rjmp	.+46     	; 0x254 <__vector_5+0x6a>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     226:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <last_button_state>
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	08 2e       	mov	r0, r24
     22e:	02 c0       	rjmp	.+4      	; 0x234 <__vector_5+0x4a>
     230:	35 95       	asr	r19
     232:	27 95       	ror	r18
     234:	0a 94       	dec	r0
     236:	e2 f7       	brpl	.-8      	; 0x230 <__vector_5+0x46>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=2; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     238:	20 fd       	sbrc	r18, 0
     23a:	0c c0       	rjmp	.+24     	; 0x254 <__vector_5+0x6a>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     23c:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <__data_end>
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	9e 0f       	add	r25, r30
     244:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <__data_end>
     248:	0e 2e       	mov	r0, r30
     24a:	00 0c       	add	r0, r0
     24c:	ff 0b       	sbc	r31, r31
     24e:	eb 5c       	subi	r30, 0xCB	; 203
     250:	fe 4f       	sbci	r31, 0xFE	; 254
     252:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=2; pin++) {
     254:	8f 5f       	subi	r24, 0xFF	; 255
     256:	83 30       	cpi	r24, 0x03	; 3
     258:	c0 f2       	brcs	.-80     	; 0x20a <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     25a:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <last_button_state>
     25e:	ff 91       	pop	r31
     260:	ef 91       	pop	r30
     262:	9f 91       	pop	r25
     264:	8f 91       	pop	r24
     266:	4f 91       	pop	r20
     268:	3f 91       	pop	r19
     26a:	2f 91       	pop	r18
     26c:	0f 90       	pop	r0
     26e:	0f be       	out	0x3f, r0	; 63
     270:	0f 90       	pop	r0
     272:	1f 90       	pop	r1
     274:	18 95       	reti

00000276 <initialise_display>:

// constant value used to display 'RVRSI' on launch
static const uint8_t reversi_display[MATRIX_NUM_COLUMNS] = 
		{125, 81, 89, 117, 120, 4, 120, 125, 81, 89, 117, 116, 84, 84, 92, 93};

void initialise_display(void) {
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	28 97       	sbiw	r28, 0x08	; 8
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	de bf       	out	0x3e, r29	; 62
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	cd bf       	out	0x3d, r28	; 61
	// start by clearing the LED matrix
	ledmatrix_clear();
     28e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <ledmatrix_clear>

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	09 c0       	rjmp	.+18     	; 0x2aa <initialise_display+0x34>
		col_colours[row] = MATRIX_COLOUR_BG;
     298:	e1 e0       	ldi	r30, 0x01	; 1
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	ec 0f       	add	r30, r28
     29e:	fd 1f       	adc	r31, r29
     2a0:	e8 0f       	add	r30, r24
     2a2:	f9 1f       	adc	r31, r25
     2a4:	25 e3       	ldi	r18, 0x35	; 53
     2a6:	20 83       	st	Z, r18
	// start by clearing the LED matrix
	ledmatrix_clear();

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     2a8:	01 96       	adiw	r24, 0x01	; 1
     2aa:	88 30       	cpi	r24, 0x08	; 8
     2ac:	91 05       	cpc	r25, r1
     2ae:	a4 f3       	brlt	.-24     	; 0x298 <initialise_display+0x22>
     2b0:	00 e0       	ldi	r16, 0x00	; 0
     2b2:	10 e0       	ldi	r17, 0x00	; 0
     2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <initialise_display+0x50>
		col_colours[row] = MATRIX_COLOUR_BG;
	}

	// then add the bounds on the left
	for (int x = 0; x < MATRIX_X_OFFSET; x++) {
		ledmatrix_update_column(x, col_colours);
     2b6:	be 01       	movw	r22, r28
     2b8:	6f 5f       	subi	r22, 0xFF	; 255
     2ba:	7f 4f       	sbci	r23, 0xFF	; 255
     2bc:	80 2f       	mov	r24, r16
     2be:	0e 94 31 05 	call	0xa62	; 0xa62 <ledmatrix_update_column>
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		col_colours[row] = MATRIX_COLOUR_BG;
	}

	// then add the bounds on the left
	for (int x = 0; x < MATRIX_X_OFFSET; x++) {
     2c2:	0f 5f       	subi	r16, 0xFF	; 255
     2c4:	1f 4f       	sbci	r17, 0xFF	; 255
     2c6:	04 30       	cpi	r16, 0x04	; 4
     2c8:	11 05       	cpc	r17, r1
     2ca:	ac f3       	brlt	.-22     	; 0x2b6 <initialise_display+0x40>
     2cc:	0c e0       	ldi	r16, 0x0C	; 12
     2ce:	10 e0       	ldi	r17, 0x00	; 0
     2d0:	08 c0       	rjmp	.+16     	; 0x2e2 <initialise_display+0x6c>
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = MATRIX_X_OFFSET + WIDTH; x < MATRIX_NUM_COLUMNS; x++) {
		ledmatrix_update_column(x, col_colours);
     2d2:	be 01       	movw	r22, r28
     2d4:	6f 5f       	subi	r22, 0xFF	; 255
     2d6:	7f 4f       	sbci	r23, 0xFF	; 255
     2d8:	80 2f       	mov	r24, r16
     2da:	0e 94 31 05 	call	0xa62	; 0xa62 <ledmatrix_update_column>
	for (int x = 0; x < MATRIX_X_OFFSET; x++) {
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = MATRIX_X_OFFSET + WIDTH; x < MATRIX_NUM_COLUMNS; x++) {
     2de:	0f 5f       	subi	r16, 0xFF	; 255
     2e0:	1f 4f       	sbci	r17, 0xFF	; 255
     2e2:	00 31       	cpi	r16, 0x10	; 16
     2e4:	11 05       	cpc	r17, r1
     2e6:	ac f3       	brlt	.-22     	; 0x2d2 <initialise_display+0x5c>
		ledmatrix_update_column(x, col_colours);
	}
}
     2e8:	28 96       	adiw	r28, 0x08	; 8
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	08 95       	ret

000002fe <start_display>:

void start_display(void) {
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
     308:	28 97       	sbiw	r28, 0x08	; 8
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     314:	0e 94 4e 05 	call	0xa9c	; 0xa9c <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     318:	10 e0       	ldi	r17, 0x00	; 0
     31a:	29 c0       	rjmp	.+82     	; 0x36e <start_display+0x70>
		col_data = reversi_display[col];
     31c:	e1 2f       	mov	r30, r17
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	e4 5e       	subi	r30, 0xE4	; 228
     322:	fe 4f       	sbci	r31, 0xFE	; 254
     324:	90 81       	ld	r25, Z
		// using the LSB as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x01) {
     326:	90 ff       	sbrs	r25, 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <start_display+0x30>
			colour = COLOUR_RED;
     32a:	2f e0       	ldi	r18, 0x0F	; 15
     32c:	01 c0       	rjmp	.+2      	; 0x330 <start_display+0x32>
		} else {
			colour = COLOUR_GREEN;
     32e:	20 ef       	ldi	r18, 0xF0	; 240
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     330:	87 e0       	ldi	r24, 0x07	; 7
     332:	13 c0       	rjmp	.+38     	; 0x35a <start_display+0x5c>
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data & 0x80) {
     334:	99 23       	and	r25, r25
     336:	44 f4       	brge	.+16     	; 0x348 <start_display+0x4a>
				column_colour_data[i] = colour;
     338:	e1 e0       	ldi	r30, 0x01	; 1
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	ec 0f       	add	r30, r28
     33e:	fd 1f       	adc	r31, r29
     340:	e8 0f       	add	r30, r24
     342:	f1 1d       	adc	r31, r1
     344:	20 83       	st	Z, r18
     346:	07 c0       	rjmp	.+14     	; 0x356 <start_display+0x58>
				} else {
				column_colour_data[i] = 0;
     348:	e1 e0       	ldi	r30, 0x01	; 1
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	ec 0f       	add	r30, r28
     34e:	fd 1f       	adc	r31, r29
     350:	e8 0f       	add	r30, r24
     352:	f1 1d       	adc	r31, r1
     354:	10 82       	st	Z, r1
			}
			col_data <<= 1;
     356:	99 0f       	add	r25, r25
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     358:	81 50       	subi	r24, 0x01	; 1
     35a:	81 11       	cpse	r24, r1
     35c:	eb cf       	rjmp	.-42     	; 0x334 <start_display+0x36>
				} else {
				column_colour_data[i] = 0;
			}
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
     35e:	19 82       	std	Y+1, r1	; 0x01
		ledmatrix_update_column(col, column_colour_data);
     360:	be 01       	movw	r22, r28
     362:	6f 5f       	subi	r22, 0xFF	; 255
     364:	7f 4f       	sbci	r23, 0xFF	; 255
     366:	81 2f       	mov	r24, r17
     368:	0e 94 31 05 	call	0xa62	; 0xa62 <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     36c:	1f 5f       	subi	r17, 0xFF	; 255
     36e:	10 31       	cpi	r17, 0x10	; 16
     370:	a8 f2       	brcs	.-86     	; 0x31c <start_display+0x1e>
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
}
     372:	28 96       	adiw	r28, 0x08	; 8
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	08 95       	ret

00000386 <update_square_colour>:

void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	// determine which colour corresponds to this object
	PixelColour colour;
	if (object == PLAYER_1) {
     386:	41 30       	cpi	r20, 0x01	; 1
     388:	41 f0       	breq	.+16     	; 0x39a <update_square_colour+0x14>
		colour = MATRIX_COLOUR_P1;
		} else if (object == PLAYER_2) {
     38a:	42 30       	cpi	r20, 0x02	; 2
     38c:	41 f0       	breq	.+16     	; 0x39e <update_square_colour+0x18>
		colour = MATRIX_COLOUR_P2;
		} else if (object == CURSOR) {
     38e:	43 30       	cpi	r20, 0x03	; 3
     390:	41 f0       	breq	.+16     	; 0x3a2 <update_square_colour+0x1c>
		colour = MATRIX_COLOUR_CURSOR;
		} else if(object == INVALID_MOVE){
     392:	45 30       	cpi	r20, 0x05	; 5
     394:	41 f4       	brne	.+16     	; 0x3a6 <update_square_colour+0x20>
			colour = MATRIX_COLOUR_INVALID;
     396:	45 ea       	ldi	r20, 0xA5	; 165
     398:	07 c0       	rjmp	.+14     	; 0x3a8 <update_square_colour+0x22>

void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	// determine which colour corresponds to this object
	PixelColour colour;
	if (object == PLAYER_1) {
		colour = MATRIX_COLOUR_P1;
     39a:	4f e0       	ldi	r20, 0x0F	; 15
     39c:	05 c0       	rjmp	.+10     	; 0x3a8 <update_square_colour+0x22>
		} else if (object == PLAYER_2) {
		colour = MATRIX_COLOUR_P2;
     39e:	40 ef       	ldi	r20, 0xF0	; 240
     3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <update_square_colour+0x22>
		} else if (object == CURSOR) {
		colour = MATRIX_COLOUR_CURSOR;
     3a2:	4c e3       	ldi	r20, 0x3C	; 60
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <update_square_colour+0x22>
		} else if(object == INVALID_MOVE){
			colour = MATRIX_COLOUR_INVALID;
		}else {
		// anything unexpected will be black
		colour = MATRIX_COLOUR_EMPTY;
     3a6:	40 e0       	ldi	r20, 0x00	; 0
	}

	// update the pixel at the given location with this colour
	// the board is offset on the x axis to be centred on the LED matrix
	ledmatrix_update_pixel(x + MATRIX_X_OFFSET, y, colour);
     3a8:	8c 5f       	subi	r24, 0xFC	; 252
     3aa:	0e 94 12 05 	call	0xa24	; 0xa24 <ledmatrix_update_pixel>
     3ae:	08 95       	ret

000003b0 <initialise_board>:
	}
	if(possible_scoring == 0){
		return 0;
	}
	return 1;
}
     3b0:	cf 93       	push	r28
     3b2:	0e 94 3b 01 	call	0x276	; 0x276 <initialise_display>
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	13 c0       	rjmp	.+38     	; 0x3e0 <initialise_board+0x30>
     3ba:	e9 2f       	mov	r30, r25
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	ee 0f       	add	r30, r30
     3c0:	ff 1f       	adc	r31, r31
     3c2:	ee 0f       	add	r30, r30
     3c4:	ff 1f       	adc	r31, r31
     3c6:	ee 0f       	add	r30, r30
     3c8:	ff 1f       	adc	r31, r31
     3ca:	eb 5b       	subi	r30, 0xBB	; 187
     3cc:	fe 4f       	sbci	r31, 0xFE	; 254
     3ce:	e8 0f       	add	r30, r24
     3d0:	f1 1d       	adc	r31, r1
     3d2:	10 82       	st	Z, r1
     3d4:	8f 5f       	subi	r24, 0xFF	; 255
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <initialise_board+0x2a>
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	88 30       	cpi	r24, 0x08	; 8
     3dc:	70 f3       	brcs	.-36     	; 0x3ba <initialise_board+0xa>
     3de:	9f 5f       	subi	r25, 0xFF	; 255
     3e0:	98 30       	cpi	r25, 0x08	; 8
     3e2:	d0 f3       	brcs	.-12     	; 0x3d8 <initialise_board+0x28>
     3e4:	c0 e0       	ldi	r28, 0x00	; 0
     3e6:	1a c0       	rjmp	.+52     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     3e8:	ec 2f       	mov	r30, r28
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	ee 0f       	add	r30, r30
     3ee:	ff 1f       	adc	r31, r31
     3f0:	e0 5d       	subi	r30, 0xD0	; 208
     3f2:	fe 4f       	sbci	r31, 0xFE	; 254
     3f4:	80 81       	ld	r24, Z
     3f6:	61 81       	ldd	r22, Z+1	; 0x01
     3f8:	e8 2f       	mov	r30, r24
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	ee 0f       	add	r30, r30
     402:	ff 1f       	adc	r31, r31
     404:	ee 0f       	add	r30, r30
     406:	ff 1f       	adc	r31, r31
     408:	eb 5b       	subi	r30, 0xBB	; 187
     40a:	fe 4f       	sbci	r31, 0xFE	; 254
     40c:	e6 0f       	add	r30, r22
     40e:	f1 1d       	adc	r31, r1
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	90 83       	st	Z, r25
     414:	41 e0       	ldi	r20, 0x01	; 1
     416:	0e 94 c3 01 	call	0x386	; 0x386 <update_square_colour>
     41a:	cf 5f       	subi	r28, 0xFF	; 255
     41c:	c2 30       	cpi	r28, 0x02	; 2
     41e:	20 f3       	brcs	.-56     	; 0x3e8 <initialise_board+0x38>
     420:	c0 e0       	ldi	r28, 0x00	; 0
     422:	1a c0       	rjmp	.+52     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     424:	ec 2f       	mov	r30, r28
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	ee 0f       	add	r30, r30
     42a:	ff 1f       	adc	r31, r31
     42c:	e4 5d       	subi	r30, 0xD4	; 212
     42e:	fe 4f       	sbci	r31, 0xFE	; 254
     430:	80 81       	ld	r24, Z
     432:	61 81       	ldd	r22, Z+1	; 0x01
     434:	e8 2f       	mov	r30, r24
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	ee 0f       	add	r30, r30
     43a:	ff 1f       	adc	r31, r31
     43c:	ee 0f       	add	r30, r30
     43e:	ff 1f       	adc	r31, r31
     440:	ee 0f       	add	r30, r30
     442:	ff 1f       	adc	r31, r31
     444:	eb 5b       	subi	r30, 0xBB	; 187
     446:	fe 4f       	sbci	r31, 0xFE	; 254
     448:	e6 0f       	add	r30, r22
     44a:	f1 1d       	adc	r31, r1
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	90 83       	st	Z, r25
     450:	42 e0       	ldi	r20, 0x02	; 2
     452:	0e 94 c3 01 	call	0x386	; 0x386 <update_square_colour>
     456:	cf 5f       	subi	r28, 0xFF	; 255
     458:	c2 30       	cpi	r28, 0x02	; 2
     45a:	20 f3       	brcs	.-56     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <current_player>
     462:	85 e0       	ldi	r24, 0x05	; 5
     464:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <cursor_x>
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <cursor_y>
     46e:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <cursor_visible>
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <get_piece_at>:
     476:	88 30       	cpi	r24, 0x08	; 8
     478:	80 f4       	brcc	.+32     	; 0x49a <get_piece_at+0x24>
     47a:	68 30       	cpi	r22, 0x08	; 8
     47c:	80 f4       	brcc	.+32     	; 0x49e <get_piece_at+0x28>
     47e:	e8 2f       	mov	r30, r24
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	ee 0f       	add	r30, r30
     484:	ff 1f       	adc	r31, r31
     486:	ee 0f       	add	r30, r30
     488:	ff 1f       	adc	r31, r31
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	eb 5b       	subi	r30, 0xBB	; 187
     490:	fe 4f       	sbci	r31, 0xFE	; 254
     492:	e6 0f       	add	r30, r22
     494:	f1 1d       	adc	r31, r1
     496:	80 81       	ld	r24, Z
     498:	08 95       	ret
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	08 95       	ret
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	08 95       	ret

000004a2 <change_led>:
     4a2:	82 b1       	in	r24, 0x02	; 2
     4a4:	86 70       	andi	r24, 0x06	; 6
     4a6:	82 b9       	out	0x02, r24	; 2
     4a8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_player>
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	19 f4       	brne	.+6      	; 0x4b6 <change_led+0x14>
     4b0:	82 b1       	in	r24, 0x02	; 2
     4b2:	82 60       	ori	r24, 0x02	; 2
     4b4:	82 b9       	out	0x02, r24	; 2
     4b6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_player>
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	19 f4       	brne	.+6      	; 0x4c4 <change_led+0x22>
     4be:	82 b1       	in	r24, 0x02	; 2
     4c0:	84 60       	ori	r24, 0x04	; 4
     4c2:	82 b9       	out	0x02, r24	; 2
     4c4:	08 95       	ret

000004c6 <seven_segment_display>:
     4c6:	18 b8       	out	0x08, r1	; 8
     4c8:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <seven_seg_cc>
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	89 1b       	sub	r24, r25
     4d0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <seven_seg_cc>
     4d4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_player>
     4d8:	81 30       	cpi	r24, 0x01	; 1
     4da:	09 f0       	breq	.+2      	; 0x4de <seven_segment_display+0x18>
     4dc:	57 c0       	rjmp	.+174    	; 0x58c <seven_segment_display+0xc6>
     4de:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <seven_seg_cc>
     4e2:	81 11       	cpse	r24, r1
     4e4:	28 c0       	rjmp	.+80     	; 0x536 <seven_segment_display+0x70>
     4e6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <seven_seg_cc>
     4ea:	82 b9       	out	0x02, r24	; 2
     4ec:	82 b1       	in	r24, 0x02	; 2
     4ee:	82 60       	ori	r24, 0x02	; 2
     4f0:	82 b9       	out	0x02, r24	; 2
     4f2:	18 b8       	out	0x08, r1	; 8
     4f4:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <player_red_score>
     4f8:	ea 30       	cpi	r30, 0x0A	; 10
     4fa:	28 f4       	brcc	.+10     	; 0x506 <seven_segment_display+0x40>
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	e0 50       	subi	r30, 0x00	; 0
     500:	ff 4f       	sbci	r31, 0xFF	; 255
     502:	80 81       	ld	r24, Z
     504:	88 b9       	out	0x08, r24	; 8
     506:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <player_red_score>
     50a:	ea 30       	cpi	r30, 0x0A	; 10
     50c:	08 f4       	brcc	.+2      	; 0x510 <seven_segment_display+0x4a>
     50e:	91 c0       	rjmp	.+290    	; 0x632 <seven_segment_display+0x16c>
     510:	8d ec       	ldi	r24, 0xCD	; 205
     512:	e8 9f       	mul	r30, r24
     514:	81 2d       	mov	r24, r1
     516:	11 24       	eor	r1, r1
     518:	86 95       	lsr	r24
     51a:	86 95       	lsr	r24
     51c:	86 95       	lsr	r24
     51e:	88 0f       	add	r24, r24
     520:	98 2f       	mov	r25, r24
     522:	99 0f       	add	r25, r25
     524:	99 0f       	add	r25, r25
     526:	89 0f       	add	r24, r25
     528:	e8 1b       	sub	r30, r24
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	e0 50       	subi	r30, 0x00	; 0
     52e:	ff 4f       	sbci	r31, 0xFF	; 255
     530:	80 81       	ld	r24, Z
     532:	88 b9       	out	0x08, r24	; 8
     534:	08 95       	ret
     536:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <seven_seg_cc>
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	09 f0       	breq	.+2      	; 0x540 <seven_segment_display+0x7a>
     53e:	79 c0       	rjmp	.+242    	; 0x632 <seven_segment_display+0x16c>
     540:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <player_red_score>
     544:	8a 30       	cpi	r24, 0x0A	; 10
     546:	08 f4       	brcc	.+2      	; 0x54a <seven_segment_display+0x84>
     548:	74 c0       	rjmp	.+232    	; 0x632 <seven_segment_display+0x16c>
     54a:	18 b8       	out	0x08, r1	; 8
     54c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <seven_seg_cc>
     550:	82 b1       	in	r24, 0x02	; 2
     552:	89 2b       	or	r24, r25
     554:	82 b9       	out	0x02, r24	; 2
     556:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <player_red_score>
     55a:	8d ec       	ldi	r24, 0xCD	; 205
     55c:	e8 9f       	mul	r30, r24
     55e:	e1 2d       	mov	r30, r1
     560:	11 24       	eor	r1, r1
     562:	e6 95       	lsr	r30
     564:	e6 95       	lsr	r30
     566:	e6 95       	lsr	r30
     568:	e8 9f       	mul	r30, r24
     56a:	81 2d       	mov	r24, r1
     56c:	11 24       	eor	r1, r1
     56e:	86 95       	lsr	r24
     570:	86 95       	lsr	r24
     572:	86 95       	lsr	r24
     574:	88 0f       	add	r24, r24
     576:	98 2f       	mov	r25, r24
     578:	99 0f       	add	r25, r25
     57a:	99 0f       	add	r25, r25
     57c:	89 0f       	add	r24, r25
     57e:	e8 1b       	sub	r30, r24
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	e0 50       	subi	r30, 0x00	; 0
     584:	ff 4f       	sbci	r31, 0xFF	; 255
     586:	80 81       	ld	r24, Z
     588:	88 b9       	out	0x08, r24	; 8
     58a:	08 95       	ret
     58c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <seven_seg_cc>
     590:	81 11       	cpse	r24, r1
     592:	27 c0       	rjmp	.+78     	; 0x5e2 <seven_segment_display+0x11c>
     594:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <seven_seg_cc>
     598:	82 b9       	out	0x02, r24	; 2
     59a:	82 b1       	in	r24, 0x02	; 2
     59c:	84 60       	ori	r24, 0x04	; 4
     59e:	82 b9       	out	0x02, r24	; 2
     5a0:	18 b8       	out	0x08, r1	; 8
     5a2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <player_green_score>
     5a6:	ea 30       	cpi	r30, 0x0A	; 10
     5a8:	28 f4       	brcc	.+10     	; 0x5b4 <seven_segment_display+0xee>
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	e0 50       	subi	r30, 0x00	; 0
     5ae:	ff 4f       	sbci	r31, 0xFF	; 255
     5b0:	80 81       	ld	r24, Z
     5b2:	88 b9       	out	0x08, r24	; 8
     5b4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <player_green_score>
     5b8:	ea 30       	cpi	r30, 0x0A	; 10
     5ba:	d8 f1       	brcs	.+118    	; 0x632 <seven_segment_display+0x16c>
     5bc:	8d ec       	ldi	r24, 0xCD	; 205
     5be:	e8 9f       	mul	r30, r24
     5c0:	81 2d       	mov	r24, r1
     5c2:	11 24       	eor	r1, r1
     5c4:	86 95       	lsr	r24
     5c6:	86 95       	lsr	r24
     5c8:	86 95       	lsr	r24
     5ca:	88 0f       	add	r24, r24
     5cc:	98 2f       	mov	r25, r24
     5ce:	99 0f       	add	r25, r25
     5d0:	99 0f       	add	r25, r25
     5d2:	89 0f       	add	r24, r25
     5d4:	e8 1b       	sub	r30, r24
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	e0 50       	subi	r30, 0x00	; 0
     5da:	ff 4f       	sbci	r31, 0xFF	; 255
     5dc:	80 81       	ld	r24, Z
     5de:	88 b9       	out	0x08, r24	; 8
     5e0:	08 95       	ret
     5e2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <seven_seg_cc>
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	21 f5       	brne	.+72     	; 0x632 <seven_segment_display+0x16c>
     5ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_green_score>
     5ee:	8a 30       	cpi	r24, 0x0A	; 10
     5f0:	00 f1       	brcs	.+64     	; 0x632 <seven_segment_display+0x16c>
     5f2:	18 b8       	out	0x08, r1	; 8
     5f4:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <seven_seg_cc>
     5f8:	82 b1       	in	r24, 0x02	; 2
     5fa:	89 2b       	or	r24, r25
     5fc:	82 b9       	out	0x02, r24	; 2
     5fe:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <player_green_score>
     602:	8d ec       	ldi	r24, 0xCD	; 205
     604:	e8 9f       	mul	r30, r24
     606:	e1 2d       	mov	r30, r1
     608:	11 24       	eor	r1, r1
     60a:	e6 95       	lsr	r30
     60c:	e6 95       	lsr	r30
     60e:	e6 95       	lsr	r30
     610:	e8 9f       	mul	r30, r24
     612:	81 2d       	mov	r24, r1
     614:	11 24       	eor	r1, r1
     616:	86 95       	lsr	r24
     618:	86 95       	lsr	r24
     61a:	86 95       	lsr	r24
     61c:	88 0f       	add	r24, r24
     61e:	98 2f       	mov	r25, r24
     620:	99 0f       	add	r25, r25
     622:	99 0f       	add	r25, r25
     624:	89 0f       	add	r24, r25
     626:	e8 1b       	sub	r30, r24
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	e0 50       	subi	r30, 0x00	; 0
     62c:	ff 4f       	sbci	r31, 0xFF	; 255
     62e:	80 81       	ld	r24, Z
     630:	88 b9       	out	0x08, r24	; 8
     632:	08 95       	ret

00000634 <update_scores>:
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	d0 e0       	ldi	r29, 0x00	; 0
     63e:	10 e0       	ldi	r17, 0x00	; 0
     640:	00 e0       	ldi	r16, 0x00	; 0
     642:	10 c0       	rjmp	.+32     	; 0x664 <update_scores+0x30>
     644:	6c 2f       	mov	r22, r28
     646:	8d 2f       	mov	r24, r29
     648:	0e 94 3b 02 	call	0x476	; 0x476 <get_piece_at>
     64c:	81 30       	cpi	r24, 0x01	; 1
     64e:	09 f4       	brne	.+2      	; 0x652 <update_scores+0x1e>
     650:	0f 5f       	subi	r16, 0xFF	; 255
     652:	82 30       	cpi	r24, 0x02	; 2
     654:	09 f4       	brne	.+2      	; 0x658 <update_scores+0x24>
     656:	1f 5f       	subi	r17, 0xFF	; 255
     658:	cf 5f       	subi	r28, 0xFF	; 255
     65a:	01 c0       	rjmp	.+2      	; 0x65e <update_scores+0x2a>
     65c:	c0 e0       	ldi	r28, 0x00	; 0
     65e:	c8 30       	cpi	r28, 0x08	; 8
     660:	88 f3       	brcs	.-30     	; 0x644 <update_scores+0x10>
     662:	df 5f       	subi	r29, 0xFF	; 255
     664:	d8 30       	cpi	r29, 0x08	; 8
     666:	d0 f3       	brcs	.-12     	; 0x65c <update_scores+0x28>
     668:	00 93 0b 01 	sts	0x010B, r16	; 0x80010b <player_red_score>
     66c:	10 93 0a 01 	sts	0x010A, r17	; 0x80010a <player_green_score>
     670:	0e 94 0a 08 	call	0x1014	; 0x1014 <hide_cursor>
     674:	6a e0       	ldi	r22, 0x0A	; 10
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	8c e3       	ldi	r24, 0x3C	; 60
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <move_terminal_cursor>
     680:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <player_red_score>
     684:	8a 30       	cpi	r24, 0x0A	; 10
     686:	68 f4       	brcc	.+26     	; 0x6a2 <update_scores+0x6e>
     688:	1f 92       	push	r1
     68a:	8f 93       	push	r24
     68c:	8c ea       	ldi	r24, 0xAC	; 172
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	9f 93       	push	r25
     692:	8f 93       	push	r24
     694:	0e 94 df 08 	call	0x11be	; 0x11be <printf_P>
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0e c0       	rjmp	.+28     	; 0x6be <update_scores+0x8a>
     6a2:	8a 30       	cpi	r24, 0x0A	; 10
     6a4:	60 f0       	brcs	.+24     	; 0x6be <update_scores+0x8a>
     6a6:	1f 92       	push	r1
     6a8:	8f 93       	push	r24
     6aa:	8c e9       	ldi	r24, 0x9C	; 156
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
     6b2:	0e 94 df 08 	call	0x11be	; 0x11be <printf_P>
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	6c e0       	ldi	r22, 0x0C	; 12
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	8c e3       	ldi	r24, 0x3C	; 60
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <move_terminal_cursor>
     6ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_green_score>
     6ce:	8a 30       	cpi	r24, 0x0A	; 10
     6d0:	68 f4       	brcc	.+26     	; 0x6ec <update_scores+0xb8>
     6d2:	1f 92       	push	r1
     6d4:	8f 93       	push	r24
     6d6:	8c e8       	ldi	r24, 0x8C	; 140
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	9f 93       	push	r25
     6dc:	8f 93       	push	r24
     6de:	0e 94 df 08 	call	0x11be	; 0x11be <printf_P>
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0e c0       	rjmp	.+28     	; 0x708 <update_scores+0xd4>
     6ec:	8a 30       	cpi	r24, 0x0A	; 10
     6ee:	60 f0       	brcs	.+24     	; 0x708 <update_scores+0xd4>
     6f0:	1f 92       	push	r1
     6f2:	8f 93       	push	r24
     6f4:	8c e7       	ldi	r24, 0x7C	; 124
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	9f 93       	push	r25
     6fa:	8f 93       	push	r24
     6fc:	0e 94 df 08 	call	0x11be	; 0x11be <printf_P>
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	08 95       	ret

00000712 <check_if_flipping_required>:
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	c8 2f       	mov	r28, r24
     720:	d6 2f       	mov	r29, r22
     722:	14 2f       	mov	r17, r20
     724:	02 2f       	mov	r16, r18
     726:	f4 2e       	mov	r15, r20
     728:	f8 0e       	add	r15, r24
     72a:	e2 2e       	mov	r14, r18
     72c:	e6 0e       	add	r14, r22
     72e:	0e 94 3b 02 	call	0x476	; 0x476 <get_piece_at>
     732:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <current_player>
     736:	89 17       	cp	r24, r25
     738:	19 f1       	breq	.+70     	; 0x780 <check_if_flipping_required+0x6e>
     73a:	88 23       	and	r24, r24
     73c:	19 f1       	breq	.+70     	; 0x784 <check_if_flipping_required+0x72>
     73e:	20 2f       	mov	r18, r16
     740:	41 2f       	mov	r20, r17
     742:	6e 2d       	mov	r22, r14
     744:	8f 2d       	mov	r24, r15
     746:	0e 94 89 03 	call	0x712	; 0x712 <check_if_flipping_required>
     74a:	18 2f       	mov	r17, r24
     74c:	8f 3f       	cpi	r24, 0xFF	; 255
     74e:	e1 f0       	breq	.+56     	; 0x788 <check_if_flipping_required+0x76>
     750:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <current_player>
     754:	6d 2f       	mov	r22, r29
     756:	8c 2f       	mov	r24, r28
     758:	0e 94 c3 01 	call	0x386	; 0x386 <update_square_colour>
     75c:	ec 2f       	mov	r30, r28
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	ee 0f       	add	r30, r30
     762:	ff 1f       	adc	r31, r31
     764:	ee 0f       	add	r30, r30
     766:	ff 1f       	adc	r31, r31
     768:	ee 0f       	add	r30, r30
     76a:	ff 1f       	adc	r31, r31
     76c:	eb 5b       	subi	r30, 0xBB	; 187
     76e:	fe 4f       	sbci	r31, 0xFE	; 254
     770:	ed 0f       	add	r30, r29
     772:	f1 1d       	adc	r31, r1
     774:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_player>
     778:	80 83       	st	Z, r24
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	81 0f       	add	r24, r17
     77e:	05 c0       	rjmp	.+10     	; 0x78a <check_if_flipping_required+0x78>
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	03 c0       	rjmp	.+6      	; 0x78a <check_if_flipping_required+0x78>
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	01 c0       	rjmp	.+2      	; 0x78a <check_if_flipping_required+0x78>
     788:	8f ef       	ldi	r24, 0xFF	; 255
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	08 95       	ret

00000798 <placement_piece_two>:
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_player>
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	19 f4       	brne	.+6      	; 0x7ac <placement_piece_two+0x14>
     7a6:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <red_score>
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <placement_piece_two+0x18>
     7ac:	10 91 0c 01 	lds	r17, 0x010C	; 0x80010c <green_score>
     7b0:	df ef       	ldi	r29, 0xFF	; 255
     7b2:	27 c0       	rjmp	.+78     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7b4:	d1 11       	cpse	r29, r1
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <placement_piece_two+0x24>
     7b8:	cc 23       	and	r28, r28
     7ba:	e9 f0       	breq	.+58     	; 0x7f6 <placement_piece_two+0x5e>
     7bc:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <cursor_y>
     7c0:	6c 0f       	add	r22, r28
     7c2:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <cursor_x>
     7c6:	2c 2f       	mov	r18, r28
     7c8:	4d 2f       	mov	r20, r29
     7ca:	8d 0f       	add	r24, r29
     7cc:	0e 94 89 03 	call	0x712	; 0x712 <check_if_flipping_required>
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	98 0f       	add	r25, r24
     7d4:	92 30       	cpi	r25, 0x02	; 2
     7d6:	78 f0       	brcs	.+30     	; 0x7f6 <placement_piece_two+0x5e>
     7d8:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <current_player>
     7dc:	91 30       	cpi	r25, 0x01	; 1
     7de:	31 f4       	brne	.+12     	; 0x7ec <placement_piece_two+0x54>
     7e0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <red_score>
     7e4:	89 0f       	add	r24, r25
     7e6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <red_score>
     7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <placement_piece_two+0x5e>
     7ec:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <green_score>
     7f0:	89 0f       	add	r24, r25
     7f2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <green_score>
     7f6:	cf 5f       	subi	r28, 0xFF	; 255
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <placement_piece_two+0x64>
     7fa:	cf ef       	ldi	r28, 0xFF	; 255
     7fc:	c2 30       	cpi	r28, 0x02	; 2
     7fe:	d4 f2       	brlt	.-76     	; 0x7b4 <placement_piece_two+0x1c>
     800:	df 5f       	subi	r29, 0xFF	; 255
     802:	d2 30       	cpi	r29, 0x02	; 2
     804:	d4 f3       	brlt	.-12     	; 0x7fa <placement_piece_two+0x62>
     806:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_player>
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	21 f4       	brne	.+8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     80e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <red_score>
     812:	19 17       	cp	r17, r25
     814:	31 f0       	breq	.+12     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	69 f4       	brne	.+26     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     81a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <green_score>
     81e:	18 13       	cpse	r17, r24
     820:	0b c0       	rjmp	.+22     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     822:	45 e0       	ldi	r20, 0x05	; 5
     824:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <cursor_y>
     828:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <cursor_x>
     82c:	0e 94 c3 01 	call	0x386	; 0x386 <update_square_colour>
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	03 c0       	rjmp	.+6      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	01 c0       	rjmp	.+2      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	08 95       	ret

00000842 <set_square_colour>:
     842:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <cursor_y>
     846:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <cursor_x>
     84a:	0e 94 3b 02 	call	0x476	; 0x476 <get_piece_at>
     84e:	81 11       	cpse	r24, r1
     850:	2b c0       	rjmp	.+86     	; 0x8a8 <set_square_colour+0x66>
     852:	0e 94 cc 03 	call	0x798	; 0x798 <placement_piece_two>
     856:	81 30       	cpi	r24, 0x01	; 1
     858:	39 f1       	breq	.+78     	; 0x8a8 <set_square_colour+0x66>
     85a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <change_led>
     85e:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <current_player>
     862:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <cursor_y>
     866:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <cursor_x>
     86a:	0e 94 c3 01 	call	0x386	; 0x386 <update_square_colour>
     86e:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <cursor_x>
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <cursor_y>
     878:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_player>
     87c:	ee 0f       	add	r30, r30
     87e:	ff 1f       	adc	r31, r31
     880:	ee 0f       	add	r30, r30
     882:	ff 1f       	adc	r31, r31
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	eb 5b       	subi	r30, 0xBB	; 187
     88a:	fe 4f       	sbci	r31, 0xFE	; 254
     88c:	e9 0f       	add	r30, r25
     88e:	f1 1d       	adc	r31, r1
     890:	80 83       	st	Z, r24
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	21 f4       	brne	.+8      	; 0x89e <set_square_colour+0x5c>
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <current_player>
     89c:	03 c0       	rjmp	.+6      	; 0x8a4 <set_square_colour+0x62>
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <current_player>
     8a4:	0e 94 1a 03 	call	0x634	; 0x634 <update_scores>
     8a8:	08 95       	ret

000008aa <check_if_invalid_move>:
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	c4 2f       	mov	r28, r20
     8b4:	d2 2f       	mov	r29, r18
     8b6:	14 2f       	mov	r17, r20
     8b8:	18 0f       	add	r17, r24
     8ba:	02 2f       	mov	r16, r18
     8bc:	06 0f       	add	r16, r22
     8be:	0e 94 3b 02 	call	0x476	; 0x476 <get_piece_at>
     8c2:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <current_player>
     8c6:	89 17       	cp	r24, r25
     8c8:	61 f0       	breq	.+24     	; 0x8e2 <check_if_invalid_move+0x38>
     8ca:	88 23       	and	r24, r24
     8cc:	61 f0       	breq	.+24     	; 0x8e6 <check_if_invalid_move+0x3c>
     8ce:	2d 2f       	mov	r18, r29
     8d0:	4c 2f       	mov	r20, r28
     8d2:	60 2f       	mov	r22, r16
     8d4:	81 2f       	mov	r24, r17
     8d6:	0e 94 55 04 	call	0x8aa	; 0x8aa <check_if_invalid_move>
     8da:	8f 3f       	cpi	r24, 0xFF	; 255
     8dc:	31 f0       	breq	.+12     	; 0x8ea <check_if_invalid_move+0x40>
     8de:	8f 5f       	subi	r24, 0xFF	; 255
     8e0:	05 c0       	rjmp	.+10     	; 0x8ec <check_if_invalid_move+0x42>
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <check_if_invalid_move+0x42>
     8e6:	8f ef       	ldi	r24, 0xFF	; 255
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <check_if_invalid_move+0x42>
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	08 95       	ret

000008f6 <placement_piece_three>:
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	df ef       	ldi	r29, 0xFF	; 255
     8fc:	16 c0       	rjmp	.+44     	; 0x92a <__stack+0x2b>
     8fe:	d1 11       	cpse	r29, r1
     900:	02 c0       	rjmp	.+4      	; 0x906 <__stack+0x7>
     902:	cc 23       	and	r28, r28
     904:	61 f0       	breq	.+24     	; 0x91e <__stack+0x1f>
     906:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <cursor_y>
     90a:	6c 0f       	add	r22, r28
     90c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <cursor_x>
     910:	2c 2f       	mov	r18, r28
     912:	4d 2f       	mov	r20, r29
     914:	8d 0f       	add	r24, r29
     916:	0e 94 55 04 	call	0x8aa	; 0x8aa <check_if_invalid_move>
     91a:	18 16       	cp	r1, r24
     91c:	54 f0       	brlt	.+20     	; 0x932 <__stack+0x33>
     91e:	cf 5f       	subi	r28, 0xFF	; 255
     920:	01 c0       	rjmp	.+2      	; 0x924 <__stack+0x25>
     922:	cf ef       	ldi	r28, 0xFF	; 255
     924:	c2 30       	cpi	r28, 0x02	; 2
     926:	5c f3       	brlt	.-42     	; 0x8fe <placement_piece_three+0x8>
     928:	df 5f       	subi	r29, 0xFF	; 255
     92a:	d2 30       	cpi	r29, 0x02	; 2
     92c:	d4 f3       	brlt	.-12     	; 0x922 <__stack+0x23>
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	01 c0       	rjmp	.+2      	; 0x934 <__stack+0x35>
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <flash_cursor>:
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <cursor_visible>
     942:	88 23       	and	r24, r24
     944:	71 f0       	breq	.+28     	; 0x962 <flash_cursor+0x28>
     946:	d0 91 44 01 	lds	r29, 0x0144	; 0x800144 <cursor_y>
     94a:	c0 91 87 01 	lds	r28, 0x0187	; 0x800187 <cursor_x>
     94e:	6d 2f       	mov	r22, r29
     950:	8c 2f       	mov	r24, r28
     952:	0e 94 3b 02 	call	0x476	; 0x476 <get_piece_at>
     956:	48 2f       	mov	r20, r24
     958:	6d 2f       	mov	r22, r29
     95a:	8c 2f       	mov	r24, r28
     95c:	0e 94 c3 01 	call	0x386	; 0x386 <update_square_colour>
     960:	13 c0       	rjmp	.+38     	; 0x988 <flash_cursor+0x4e>
     962:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <placement_piece_three>
     966:	81 30       	cpi	r24, 0x01	; 1
     968:	41 f4       	brne	.+16     	; 0x97a <flash_cursor+0x40>
     96a:	45 e0       	ldi	r20, 0x05	; 5
     96c:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <cursor_y>
     970:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <cursor_x>
     974:	0e 94 c3 01 	call	0x386	; 0x386 <update_square_colour>
     978:	07 c0       	rjmp	.+14     	; 0x988 <flash_cursor+0x4e>
     97a:	43 e0       	ldi	r20, 0x03	; 3
     97c:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <cursor_y>
     980:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <cursor_x>
     984:	0e 94 c3 01 	call	0x386	; 0x386 <update_square_colour>
     988:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <cursor_visible>
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	89 1b       	sub	r24, r25
     990:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <cursor_visible>
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <move_display_cursor>:
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	08 2f       	mov	r16, r24
     9a4:	16 2f       	mov	r17, r22
     9a6:	d0 91 44 01 	lds	r29, 0x0144	; 0x800144 <cursor_y>
     9aa:	c0 91 87 01 	lds	r28, 0x0187	; 0x800187 <cursor_x>
     9ae:	6d 2f       	mov	r22, r29
     9b0:	8c 2f       	mov	r24, r28
     9b2:	0e 94 3b 02 	call	0x476	; 0x476 <get_piece_at>
     9b6:	48 2f       	mov	r20, r24
     9b8:	6d 2f       	mov	r22, r29
     9ba:	8c 2f       	mov	r24, r28
     9bc:	0e 94 c3 01 	call	0x386	; 0x386 <update_square_colour>
     9c0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <cursor_x>
     9c4:	80 0f       	add	r24, r16
     9c6:	87 70       	andi	r24, 0x07	; 7
     9c8:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <cursor_x>
     9cc:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <cursor_y>
     9d0:	61 0f       	add	r22, r17
     9d2:	67 70       	andi	r22, 0x07	; 7
     9d4:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <cursor_y>
     9d8:	0e 94 9d 04 	call	0x93a	; 0x93a <flash_cursor>
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	08 95       	ret

000009e6 <is_game_over>:

uint8_t is_game_over(void) {
	// The game ends when every single square is filled
	// Check for any squares that are empty
	for (uint8_t x = 0; x < WIDTH; x++) {
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	15 c0       	rjmp	.+42     	; 0xa14 <is_game_over+0x2e>
		for (uint8_t y = 0; y < HEIGHT; y++) {
			if (board[x][y] == EMPTY_SQUARE) {
     9ea:	e2 2f       	mov	r30, r18
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	ee 0f       	add	r30, r30
     9f0:	ff 1f       	adc	r31, r31
     9f2:	ee 0f       	add	r30, r30
     9f4:	ff 1f       	adc	r31, r31
     9f6:	ee 0f       	add	r30, r30
     9f8:	ff 1f       	adc	r31, r31
     9fa:	eb 5b       	subi	r30, 0xBB	; 187
     9fc:	fe 4f       	sbci	r31, 0xFE	; 254
     9fe:	e9 0f       	add	r30, r25
     a00:	f1 1d       	adc	r31, r1
     a02:	80 81       	ld	r24, Z
     a04:	88 23       	and	r24, r24
     a06:	49 f0       	breq	.+18     	; 0xa1a <is_game_over+0x34>

uint8_t is_game_over(void) {
	// The game ends when every single square is filled
	// Check for any squares that are empty
	for (uint8_t x = 0; x < WIDTH; x++) {
		for (uint8_t y = 0; y < HEIGHT; y++) {
     a08:	9f 5f       	subi	r25, 0xFF	; 255
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <is_game_over+0x28>
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	98 30       	cpi	r25, 0x08	; 8
     a10:	60 f3       	brcs	.-40     	; 0x9ea <is_game_over+0x4>
}

uint8_t is_game_over(void) {
	// The game ends when every single square is filled
	// Check for any squares that are empty
	for (uint8_t x = 0; x < WIDTH; x++) {
     a12:	2f 5f       	subi	r18, 0xFF	; 255
     a14:	28 30       	cpi	r18, 0x08	; 8
     a16:	d0 f3       	brcs	.-12     	; 0xa0c <is_game_over+0x26>
			}
		}
	}
	// every single position has been checked and no empty squares were found
	// the game is over
	return 1;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	08 95       	ret

00000a1c <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     a1c:	80 e8       	ldi	r24, 0x80	; 128
     a1e:	0e 94 be 07 	call	0xf7c	; 0xf7c <spi_setup_master>
     a22:	08 95       	ret

00000a24 <ledmatrix_update_pixel>:
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	80 31       	cpi	r24, 0x10	; 16
     a2c:	b0 f4       	brcc	.+44     	; 0xa5a <ledmatrix_update_pixel+0x36>
     a2e:	68 30       	cpi	r22, 0x08	; 8
     a30:	a0 f4       	brcc	.+40     	; 0xa5a <ledmatrix_update_pixel+0x36>
     a32:	14 2f       	mov	r17, r20
     a34:	c6 2f       	mov	r28, r22
     a36:	d8 2f       	mov	r29, r24
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <spi_send_byte>
     a3e:	6c 2f       	mov	r22, r28
     a40:	67 70       	andi	r22, 0x07	; 7
     a42:	80 e1       	ldi	r24, 0x10	; 16
     a44:	68 9f       	mul	r22, r24
     a46:	90 01       	movw	r18, r0
     a48:	11 24       	eor	r1, r1
     a4a:	8d 2f       	mov	r24, r29
     a4c:	8f 70       	andi	r24, 0x0F	; 15
     a4e:	82 2b       	or	r24, r18
     a50:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <spi_send_byte>
     a54:	81 2f       	mov	r24, r17
     a56:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <spi_send_byte>
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	08 95       	ret

00000a62 <ledmatrix_update_column>:
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	cf 93       	push	r28
     a68:	80 31       	cpi	r24, 0x10	; 16
     a6a:	a0 f4       	brcc	.+40     	; 0xa94 <ledmatrix_update_column+0x32>
     a6c:	8b 01       	movw	r16, r22
     a6e:	c8 2f       	mov	r28, r24
     a70:	83 e0       	ldi	r24, 0x03	; 3
     a72:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <spi_send_byte>
     a76:	8c 2f       	mov	r24, r28
     a78:	8f 70       	andi	r24, 0x0F	; 15
     a7a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <spi_send_byte>
     a7e:	c0 e0       	ldi	r28, 0x00	; 0
     a80:	07 c0       	rjmp	.+14     	; 0xa90 <ledmatrix_update_column+0x2e>
     a82:	f8 01       	movw	r30, r16
     a84:	ec 0f       	add	r30, r28
     a86:	f1 1d       	adc	r31, r1
     a88:	80 81       	ld	r24, Z
     a8a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <spi_send_byte>
     a8e:	cf 5f       	subi	r28, 0xFF	; 255
     a90:	c8 30       	cpi	r28, 0x08	; 8
     a92:	b8 f3       	brcs	.-18     	; 0xa82 <ledmatrix_update_column+0x20>
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     a9c:	8f e0       	ldi	r24, 0x0F	; 15
     a9e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <spi_send_byte>
     aa2:	08 95       	ret

00000aa4 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     aa4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <ledmatrix_setup>
	init_button_interrupts();
     aa8:	0e 94 bd 00 	call	0x17a	; 0x17a <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	7b e4       	ldi	r23, 0x4B	; 75
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 d6 06 	call	0xdac	; 0xdac <init_serial_stdio>
	
	init_timer0();
     aba:	0e 94 13 08 	call	0x1026	; 0x1026 <init_timer0>
	
	// Turn on global interrupts
	sei();
     abe:	78 94       	sei
     ac0:	08 95       	ret

00000ac2 <start_screen>:
}

void start_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
     ac2:	0e 94 01 08 	call	0x1002	; 0x1002 <clear_terminal>
	move_terminal_cursor(10,10);
     ac6:	6a e0       	ldi	r22, 0x0A	; 10
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	8a e0       	ldi	r24, 0x0A	; 10
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <move_terminal_cursor>
	printf_P(PSTR("Reversi"));
     ad2:	8e e1       	ldi	r24, 0x1E	; 30
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	9f 93       	push	r25
     ad8:	8f 93       	push	r24
     ada:	0e 94 df 08 	call	0x11be	; 0x11be <printf_P>
	move_terminal_cursor(10,12);
     ade:	6c e0       	ldi	r22, 0x0C	; 12
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	8a e0       	ldi	r24, 0x0A	; 10
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <move_terminal_cursor>
	printf_P(PSTR("CSSE2010/7201 project by Pranay, Student Number: 46444675"));
     aea:	84 ee       	ldi	r24, 0xE4	; 228
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	9f 93       	push	r25
     af0:	8f 93       	push	r24
     af2:	0e 94 df 08 	call	0x11be	; 0x11be <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	start_display();
     af6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <start_display>
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
     b02:	0e 94 1d 07 	call	0xe3a	; 0xe3a <serial_input_available>
     b06:	88 23       	and	r24, r24
     b08:	39 f0       	breq	.+14     	; 0xb18 <start_screen+0x56>
			serial_input = fgetc(stdin);
     b0a:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__iob>
     b0e:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <__iob+0x1>
     b12:	0e 94 a1 08 	call	0x1142	; 0x1142 <fgetc>
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <start_screen+0x58>
	while(1) {
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     b18:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
     b1a:	83 37       	cpi	r24, 0x73	; 115
     b1c:	31 f0       	breq	.+12     	; 0xb2a <start_screen+0x68>
     b1e:	83 35       	cpi	r24, 0x53	; 83
     b20:	21 f0       	breq	.+8      	; 0xb2a <start_screen+0x68>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     b22:	0e 94 cd 00 	call	0x19a	; 0x19a <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
     b26:	8f 3f       	cpi	r24, 0xFF	; 255
     b28:	61 f3       	breq	.-40     	; 0xb02 <start_screen+0x40>
     b2a:	08 95       	ret

00000b2c <new_game>:
	}
}

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     b2c:	0e 94 01 08 	call	0x1002	; 0x1002 <clear_terminal>
	
	// Initialise the game and display
	initialise_board();
     b30:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <initialise_board>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     b34:	0e 94 cd 00 	call	0x19a	; 0x19a <button_pushed>
	clear_serial_input_buffer();
     b38:	0e 94 24 07 	call	0xe48	; 0xe48 <clear_serial_input_buffer>
     b3c:	08 95       	ret

00000b3e <play_game>:
}

void play_game(void) {
     b3e:	8f 92       	push	r8
     b40:	9f 92       	push	r9
     b42:	af 92       	push	r10
     b44:	bf 92       	push	r11
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
	uint32_t last_flash_time, current_time;
	uint8_t btn; //the button pushed
	uint8_t pause_state = 0;
	uint32_t time_stamp;
	
	update_scores();
     b52:	0e 94 1a 03 	call	0x634	; 0x634 <update_scores>
	
	
	last_flash_time = get_current_time();
     b56:	0e 94 2b 08 	call	0x1056	; 0x1056 <get_current_time>
     b5a:	4b 01       	movw	r8, r22
     b5c:	5c 01       	movw	r10, r24
	
	// all ports to output for seven_segment_display	
	DDRC = 0xFF;
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	87 b9       	out	0x07, r24	; 7
	
	// set port A pin 0 to be output
	DDRA = 0x07;
     b62:	87 e0       	ldi	r24, 0x07	; 7
     b64:	81 b9       	out	0x01, r24	; 1

void play_game(void) {
	
	uint32_t last_flash_time, current_time;
	uint8_t btn; //the button pushed
	uint8_t pause_state = 0;
     b66:	c0 e0       	ldi	r28, 0x00	; 0
	
	// set port A pin 0 to be output
	DDRA = 0x07;
	
	// We play the game until it's over
	while(!is_game_over()) {
     b68:	7f c0       	rjmp	.+254    	; 0xc68 <play_game+0x12a>
				
		// Displays the seven segment display		
		seven_segment_display();
     b6a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <seven_segment_display>
		
		char serial_input1 = -1;
		if(serial_input_available() && pause_state == 1){
     b6e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <serial_input_available>
     b72:	88 23       	and	r24, r24
     b74:	91 f0       	breq	.+36     	; 0xb9a <play_game+0x5c>
     b76:	c1 30       	cpi	r28, 0x01	; 1
     b78:	81 f4       	brne	.+32     	; 0xb9a <play_game+0x5c>
			serial_input1 = fgetc(stdin);
     b7a:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__iob>
     b7e:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <__iob+0x1>
     b82:	0e 94 a1 08 	call	0x1142	; 0x1142 <fgetc>
			if (serial_input1 == 'P' || serial_input1 == 'p'){
     b86:	80 35       	cpi	r24, 0x50	; 80
     b88:	11 f0       	breq	.+4      	; 0xb8e <play_game+0x50>
     b8a:	80 37       	cpi	r24, 0x70	; 112
     b8c:	19 f4       	brne	.+6      	; 0xb94 <play_game+0x56>
				pause_state = 1 - pause_state;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	8c 1b       	sub	r24, r28
     b92:	c8 2f       	mov	r28, r24
				current_time = time_stamp;
			}
			if(pause_state == 1){
     b94:	c1 30       	cpi	r28, 0x01	; 1
     b96:	09 f4       	brne	.+2      	; 0xb9a <play_game+0x5c>
     b98:	67 c0       	rjmp	.+206    	; 0xc68 <play_game+0x12a>
				continue;
			}	
		}	
		if(pause_state == 0){
     b9a:	c1 11       	cpse	r28, r1
     b9c:	65 c0       	rjmp	.+202    	; 0xc68 <play_game+0x12a>
			btn = button_pushed();
     b9e:	0e 94 cd 00 	call	0x19a	; 0x19a <button_pushed>
			char serial_input = -1;
			if(btn == BUTTON0_PUSHED){
     ba2:	81 11       	cpse	r24, r1
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <play_game+0x6e>
				set_square_colour();
     ba6:	0e 94 21 04 	call	0x842	; 0x842 <set_square_colour>
     baa:	0d c0       	rjmp	.+26     	; 0xbc6 <play_game+0x88>
			}
			else if(btn == BUTTON1_PUSHED){
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	29 f4       	brne	.+10     	; 0xbba <play_game+0x7c>
				move_display_cursor(0, 1);
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	0e 94 cd 04 	call	0x99a	; 0x99a <move_display_cursor>
     bb8:	06 c0       	rjmp	.+12     	; 0xbc6 <play_game+0x88>
			}
			else if(btn == BUTTON2_PUSHED){
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	21 f4       	brne	.+8      	; 0xbc6 <play_game+0x88>
				move_display_cursor(-1, 0);
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	8f ef       	ldi	r24, 0xFF	; 255
     bc2:	0e 94 cd 04 	call	0x99a	; 0x99a <move_display_cursor>
			}
			if (serial_input_available()) {
     bc6:	0e 94 1d 07 	call	0xe3a	; 0xe3a <serial_input_available>
     bca:	88 23       	and	r24, r24
     bcc:	d1 f1       	breq	.+116    	; 0xc42 <play_game+0x104>
				// character input from the serial terminal
				serial_input = fgetc(stdin);
     bce:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__iob>
     bd2:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <__iob+0x1>
     bd6:	0e 94 a1 08 	call	0x1142	; 0x1142 <fgetc>
     bda:	d8 2f       	mov	r29, r24
				if(serial_input == 'W' || serial_input == 'w'){
     bdc:	87 35       	cpi	r24, 0x57	; 87
     bde:	11 f0       	breq	.+4      	; 0xbe4 <play_game+0xa6>
     be0:	87 37       	cpi	r24, 0x77	; 119
     be2:	29 f4       	brne	.+10     	; 0xbee <play_game+0xb0>
					move_display_cursor(0, 1);
     be4:	61 e0       	ldi	r22, 0x01	; 1
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	0e 94 cd 04 	call	0x99a	; 0x99a <move_display_cursor>
     bec:	1f c0       	rjmp	.+62     	; 0xc2c <play_game+0xee>
				}
				else if(serial_input == 'A' || serial_input == 'a'){
     bee:	81 34       	cpi	r24, 0x41	; 65
     bf0:	11 f0       	breq	.+4      	; 0xbf6 <play_game+0xb8>
     bf2:	81 36       	cpi	r24, 0x61	; 97
     bf4:	29 f4       	brne	.+10     	; 0xc00 <play_game+0xc2>
					move_display_cursor(-1, 0);
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	8f ef       	ldi	r24, 0xFF	; 255
     bfa:	0e 94 cd 04 	call	0x99a	; 0x99a <move_display_cursor>
     bfe:	16 c0       	rjmp	.+44     	; 0xc2c <play_game+0xee>
				}
				else if(serial_input == 'S' || serial_input == 's'){
     c00:	83 35       	cpi	r24, 0x53	; 83
     c02:	11 f0       	breq	.+4      	; 0xc08 <play_game+0xca>
     c04:	83 37       	cpi	r24, 0x73	; 115
     c06:	29 f4       	brne	.+10     	; 0xc12 <play_game+0xd4>
					move_display_cursor(0, -1);
     c08:	6f ef       	ldi	r22, 0xFF	; 255
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 cd 04 	call	0x99a	; 0x99a <move_display_cursor>
     c10:	0d c0       	rjmp	.+26     	; 0xc2c <play_game+0xee>
				}
				else if(serial_input == 'D' || serial_input == 'd'){
     c12:	84 34       	cpi	r24, 0x44	; 68
     c14:	11 f0       	breq	.+4      	; 0xc1a <play_game+0xdc>
     c16:	84 36       	cpi	r24, 0x64	; 100
     c18:	29 f4       	brne	.+10     	; 0xc24 <play_game+0xe6>
					move_display_cursor(1, 0);
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	0e 94 cd 04 	call	0x99a	; 0x99a <move_display_cursor>
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <play_game+0xee>
				}
				else if (serial_input == ' '){
     c24:	80 32       	cpi	r24, 0x20	; 32
     c26:	11 f4       	brne	.+4      	; 0xc2c <play_game+0xee>
					set_square_colour();
     c28:	0e 94 21 04 	call	0x842	; 0x842 <set_square_colour>
				}
				if (serial_input == 'P'|| serial_input == 'p'){
     c2c:	d0 35       	cpi	r29, 0x50	; 80
     c2e:	11 f0       	breq	.+4      	; 0xc34 <play_game+0xf6>
     c30:	d0 37       	cpi	r29, 0x70	; 112
     c32:	39 f4       	brne	.+14     	; 0xc42 <play_game+0x104>
					time_stamp = get_current_time();
     c34:	0e 94 2b 08 	call	0x1056	; 0x1056 <get_current_time>
					init_button_interrupts();
     c38:	0e 94 bd 00 	call	0x17a	; 0x17a <init_button_interrupts>
					pause_state = 1 - pause_state;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	8c 1b       	sub	r24, r28
     c40:	c8 2f       	mov	r28, r24
				}
			}
			
			current_time = get_current_time();
     c42:	0e 94 2b 08 	call	0x1056	; 0x1056 <get_current_time>
     c46:	6b 01       	movw	r12, r22
     c48:	7c 01       	movw	r14, r24
			if(current_time >= last_flash_time + 500) {
     c4a:	d5 01       	movw	r26, r10
     c4c:	c4 01       	movw	r24, r8
     c4e:	8c 50       	subi	r24, 0x0C	; 12
     c50:	9e 4f       	sbci	r25, 0xFE	; 254
     c52:	af 4f       	sbci	r26, 0xFF	; 255
     c54:	bf 4f       	sbci	r27, 0xFF	; 255
     c56:	c8 16       	cp	r12, r24
     c58:	d9 06       	cpc	r13, r25
     c5a:	ea 06       	cpc	r14, r26
     c5c:	fb 06       	cpc	r15, r27
     c5e:	20 f0       	brcs	.+8      	; 0xc68 <play_game+0x12a>
				// 500ms (0.5 second) has passed since the last time we
				// flashed the cursor, so flash the cursor
				flash_cursor();
     c60:	0e 94 9d 04 	call	0x93a	; 0x93a <flash_cursor>
				
				// Update the most recent time the cursor was flashed
				last_flash_time = current_time;
     c64:	46 01       	movw	r8, r12
     c66:	57 01       	movw	r10, r14
	
	// set port A pin 0 to be output
	DDRA = 0x07;
	
	// We play the game until it's over
	while(!is_game_over()) {
     c68:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <is_game_over>
     c6c:	88 23       	and	r24, r24
     c6e:	09 f4       	brne	.+2      	; 0xc72 <play_game+0x134>
     c70:	7c cf       	rjmp	.-264    	; 0xb6a <play_game+0x2c>
				last_flash_time = current_time;
			}
		}
	}
	// We get here if the game is over.
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	cf 90       	pop	r12
     c7e:	bf 90       	pop	r11
     c80:	af 90       	pop	r10
     c82:	9f 90       	pop	r9
     c84:	8f 90       	pop	r8
     c86:	08 95       	ret

00000c88 <handle_game_over>:

void handle_game_over() {
	move_terminal_cursor(10,14);
     c88:	6e e0       	ldi	r22, 0x0E	; 14
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	8a e0       	ldi	r24, 0x0A	; 10
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     c94:	8a ed       	ldi	r24, 0xDA	; 218
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	0e 94 df 08 	call	0x11be	; 0x11be <printf_P>
	move_terminal_cursor(10,15);
     ca0:	6f e0       	ldi	r22, 0x0F	; 15
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	8a e0       	ldi	r24, 0x0A	; 10
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <move_terminal_cursor>
	printf_P(PSTR("Press a button to start again"));
     cac:	8c eb       	ldi	r24, 0xBC	; 188
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	9f 93       	push	r25
     cb2:	8f 93       	push	r24
     cb4:	0e 94 df 08 	call	0x11be	; 0x11be <printf_P>
	
	while(button_pushed() == NO_BUTTON_PUSHED) {
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0e 94 cd 00 	call	0x19a	; 0x19a <button_pushed>
     cc4:	8f 3f       	cpi	r24, 0xFF	; 255
     cc6:	e1 f3       	breq	.-8      	; 0xcc0 <handle_game_over+0x38>
		; // wait
	}
	
}
     cc8:	08 95       	ret

00000cca <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     cca:	0e 94 52 05 	call	0xaa4	; 0xaa4 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	start_screen();
     cce:	0e 94 61 05 	call	0xac2	; 0xac2 <start_screen>
	
	// Loop forever,
	while(1) {
		new_game();
     cd2:	0e 94 96 05 	call	0xb2c	; 0xb2c <new_game>
		play_game();
     cd6:	0e 94 9f 05 	call	0xb3e	; 0xb3e <play_game>
		handle_game_over();
     cda:	0e 94 44 06 	call	0xc88	; 0xc88 <handle_game_over>
     cde:	f9 cf       	rjmp	.-14     	; 0xcd2 <main+0x8>

00000ce0 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     ce0:	cf 93       	push	r28
     ce2:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     ce4:	8a 30       	cpi	r24, 0x0A	; 10
     ce6:	19 f4       	brne	.+6      	; 0xcee <uart_put_char+0xe>
		uart_put_char('\r', stream);
     ce8:	8d e0       	ldi	r24, 0x0D	; 13
     cea:	0e 94 70 06 	call	0xce0	; 0xce0 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     cee:	9f b7       	in	r25, 0x3f	; 63
     cf0:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <uart_put_char+0x18>
		if(!interrupts_enabled) {
     cf4:	99 23       	and	r25, r25
     cf6:	29 f1       	breq	.+74     	; 0xd42 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     cf8:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     cfc:	8f 3f       	cpi	r24, 0xFF	; 255
     cfe:	d1 f3       	breq	.-12     	; 0xcf4 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     d00:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     d02:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <out_insert_pos>
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	8e 0f       	add	r24, r30
     d0a:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <out_insert_pos>
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	e6 57       	subi	r30, 0x76	; 118
     d12:	fe 4f       	sbci	r31, 0xFE	; 254
     d14:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     d16:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     d1a:	8f 5f       	subi	r24, 0xFF	; 255
     d1c:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     d20:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <out_insert_pos>
     d24:	8f 3f       	cpi	r24, 0xFF	; 255
     d26:	11 f4       	brne	.+4      	; 0xd2c <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     d28:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     d2c:	e1 ec       	ldi	r30, 0xC1	; 193
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 62       	ori	r24, 0x20	; 32
     d34:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     d36:	99 23       	and	r25, r25
     d38:	39 f0       	breq	.+14     	; 0xd48 <uart_put_char+0x68>
		sei();
     d3a:	78 94       	sei
	}
	return 0;
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	05 c0       	rjmp	.+10     	; 0xd4c <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
}
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     d50:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <bytes_in_input_buffer>
     d54:	88 23       	and	r24, r24
     d56:	e1 f3       	breq	.-8      	; 0xd50 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     d58:	2f b7       	in	r18, 0x3f	; 63
     d5a:	20 78       	andi	r18, 0x80	; 128
	cli();
     d5c:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     d5e:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <input_insert_pos>
     d62:	30 91 9b 02 	lds	r19, 0x029B	; 0x80029b <bytes_in_input_buffer>
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	83 1b       	sub	r24, r19
     d6a:	91 09       	sbc	r25, r1
     d6c:	5a f4       	brpl	.+22     	; 0xd84 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     d6e:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <input_insert_pos>
     d72:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <bytes_in_input_buffer>
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	e8 1b       	sub	r30, r24
     d7a:	f1 09       	sbc	r31, r1
     d7c:	e6 56       	subi	r30, 0x66	; 102
     d7e:	fd 4f       	sbci	r31, 0xFD	; 253
     d80:	80 81       	ld	r24, Z
     d82:	0a c0       	rjmp	.+20     	; 0xd98 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     d84:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <input_insert_pos>
     d88:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <bytes_in_input_buffer>
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	e8 1b       	sub	r30, r24
     d90:	f1 09       	sbc	r31, r1
     d92:	e6 57       	subi	r30, 0x76	; 118
     d94:	fd 4f       	sbci	r31, 0xFD	; 253
     d96:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     d98:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <bytes_in_input_buffer>
     d9c:	91 50       	subi	r25, 0x01	; 1
     d9e:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <bytes_in_input_buffer>
	if(interrupts_enabled) {
     da2:	22 23       	and	r18, r18
     da4:	09 f0       	breq	.+2      	; 0xda8 <uart_get_char+0x58>
		sei();
     da6:	78 94       	sei
	}	
	return c;
}
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	08 95       	ret

00000dac <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     dac:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <out_insert_pos>
	bytes_in_out_buffer = 0;
     db0:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <bytes_in_out_buffer>
	input_insert_pos = 0;
     db4:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <input_insert_pos>
	bytes_in_input_buffer = 0;
     db8:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <bytes_in_input_buffer>
	input_overrun = 0;
     dbc:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     dc0:	40 93 3b 01 	sts	0x013B, r20	; 0x80013b <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	aa 1f       	adc	r26, r26
     dce:	bb 1f       	adc	r27, r27
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	aa 1f       	adc	r26, r26
     dd6:	bb 1f       	adc	r27, r27
     dd8:	9c 01       	movw	r18, r24
     dda:	ad 01       	movw	r20, r26
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	44 1f       	adc	r20, r20
     de2:	55 1f       	adc	r21, r21
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	72 e1       	ldi	r23, 0x12	; 18
     de8:	8a e7       	ldi	r24, 0x7A	; 122
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__divmodsi4>
     df0:	ba 01       	movw	r22, r20
     df2:	a9 01       	movw	r20, r18
     df4:	4f 5f       	subi	r20, 0xFF	; 255
     df6:	5f 4f       	sbci	r21, 0xFF	; 255
     df8:	6f 4f       	sbci	r22, 0xFF	; 255
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	db 01       	movw	r26, r22
     dfe:	ca 01       	movw	r24, r20
     e00:	1a f4       	brpl	.+6      	; 0xe08 <init_serial_stdio+0x5c>
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	a1 1d       	adc	r26, r1
     e06:	b1 1d       	adc	r27, r1
     e08:	b5 95       	asr	r27
     e0a:	a7 95       	ror	r26
     e0c:	97 95       	ror	r25
     e0e:	87 95       	ror	r24
     e10:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     e12:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     e16:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     e1a:	e1 ec       	ldi	r30, 0xC1	; 193
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	88 e1       	ldi	r24, 0x18	; 24
     e20:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     e22:	80 81       	ld	r24, Z
     e24:	80 68       	ori	r24, 0x80	; 128
     e26:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     e28:	ec e9       	ldi	r30, 0x9C	; 156
     e2a:	f2 e0       	ldi	r31, 0x02	; 2
     e2c:	8e e0       	ldi	r24, 0x0E	; 14
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	93 83       	std	Z+3, r25	; 0x03
     e32:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	80 83       	st	Z, r24
     e38:	08 95       	ret

00000e3a <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     e3a:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <bytes_in_input_buffer>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	91 11       	cpse	r25, r1
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <serial_input_available+0xc>
     e44:	80 e0       	ldi	r24, 0x00	; 0
}
     e46:	08 95       	ret

00000e48 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     e48:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <input_insert_pos>
	bytes_in_input_buffer = 0;
     e4c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <bytes_in_input_buffer>
     e50:	08 95       	ret

00000e52 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	2f 93       	push	r18
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     e66:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     e6a:	88 23       	and	r24, r24
     e6c:	29 f1       	breq	.+74     	; 0xeb8 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     e6e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <out_insert_pos>
     e72:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <bytes_in_out_buffer>
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	82 1b       	sub	r24, r18
     e7a:	91 09       	sbc	r25, r1
     e7c:	5a f4       	brpl	.+22     	; 0xe94 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     e7e:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <out_insert_pos>
     e82:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	e8 1b       	sub	r30, r24
     e8a:	f1 09       	sbc	r31, r1
     e8c:	e7 57       	subi	r30, 0x77	; 119
     e8e:	fd 4f       	sbci	r31, 0xFD	; 253
     e90:	90 81       	ld	r25, Z
     e92:	0a c0       	rjmp	.+20     	; 0xea8 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     e94:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <out_insert_pos>
     e98:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	e8 1b       	sub	r30, r24
     ea0:	f1 09       	sbc	r31, r1
     ea2:	e6 57       	subi	r30, 0x76	; 118
     ea4:	fe 4f       	sbci	r31, 0xFE	; 254
     ea6:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     ea8:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     eac:	81 50       	subi	r24, 0x01	; 1
     eae:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     eb2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     eb8:	e1 ec       	ldi	r30, 0xC1	; 193
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 7d       	andi	r24, 0xDF	; 223
     ec0:	80 83       	st	Z, r24
	}
}
     ec2:	ff 91       	pop	r31
     ec4:	ef 91       	pop	r30
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	2f 91       	pop	r18
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	0f 90       	pop	r0
     ed2:	1f 90       	pop	r1
     ed4:	18 95       	reti

00000ed6 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	2f 93       	push	r18
     ee2:	3f 93       	push	r19
     ee4:	4f 93       	push	r20
     ee6:	5f 93       	push	r21
     ee8:	6f 93       	push	r22
     eea:	7f 93       	push	r23
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	af 93       	push	r26
     ef2:	bf 93       	push	r27
     ef4:	cf 93       	push	r28
     ef6:	ef 93       	push	r30
     ef8:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     efa:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     efe:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <do_echo>
     f02:	88 23       	and	r24, r24
     f04:	49 f0       	breq	.+18     	; 0xf18 <__vector_20+0x42>
     f06:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     f0a:	8f 3f       	cpi	r24, 0xFF	; 255
     f0c:	29 f0       	breq	.+10     	; 0xf18 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	8c 2f       	mov	r24, r28
     f14:	0e 94 70 06 	call	0xce0	; 0xce0 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     f18:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <bytes_in_input_buffer>
     f1c:	80 31       	cpi	r24, 0x10	; 16
     f1e:	20 f0       	brcs	.+8      	; 0xf28 <__vector_20+0x52>
		input_overrun = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <input_overrun>
     f26:	18 c0       	rjmp	.+48     	; 0xf58 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     f28:	cd 30       	cpi	r28, 0x0D	; 13
     f2a:	09 f4       	brne	.+2      	; 0xf2e <__vector_20+0x58>
			c = '\n';
     f2c:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     f2e:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <input_insert_pos>
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	8e 0f       	add	r24, r30
     f36:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <input_insert_pos>
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	e6 57       	subi	r30, 0x76	; 118
     f3e:	fd 4f       	sbci	r31, 0xFD	; 253
     f40:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     f42:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <bytes_in_input_buffer>
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     f4c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <input_insert_pos>
     f50:	80 31       	cpi	r24, 0x10	; 16
     f52:	11 f4       	brne	.+4      	; 0xf58 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     f54:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <input_insert_pos>
		}
	}
}
     f58:	ff 91       	pop	r31
     f5a:	ef 91       	pop	r30
     f5c:	cf 91       	pop	r28
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti

00000f7c <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
     f7c:	94 b1       	in	r25, 0x04	; 4
     f7e:	90 6b       	ori	r25, 0xB0	; 176
     f80:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
     f82:	95 b1       	in	r25, 0x05	; 5
     f84:	90 61       	ori	r25, 0x10	; 16
     f86:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
     f88:	90 e5       	ldi	r25, 0x50	; 80
     f8a:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
     f8c:	88 30       	cpi	r24, 0x08	; 8
     f8e:	21 f0       	breq	.+8      	; 0xf98 <spi_setup_master+0x1c>
     f90:	80 32       	cpi	r24, 0x20	; 32
     f92:	11 f0       	breq	.+4      	; 0xf98 <spi_setup_master+0x1c>
     f94:	82 30       	cpi	r24, 0x02	; 2
     f96:	19 f4       	brne	.+6      	; 0xf9e <spi_setup_master+0x22>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	9d bd       	out	0x2d, r25	; 45
			break;
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
     f9e:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
     fa0:	80 32       	cpi	r24, 0x20	; 32
     fa2:	69 f0       	breq	.+26     	; 0xfbe <spi_setup_master+0x42>
     fa4:	28 f4       	brcc	.+10     	; 0xfb0 <spi_setup_master+0x34>
     fa6:	88 30       	cpi	r24, 0x08	; 8
     fa8:	71 f0       	breq	.+28     	; 0xfc6 <spi_setup_master+0x4a>
     faa:	80 31       	cpi	r24, 0x10	; 16
     fac:	61 f0       	breq	.+24     	; 0xfc6 <spi_setup_master+0x4a>
     fae:	0e c0       	rjmp	.+28     	; 0xfcc <spi_setup_master+0x50>
     fb0:	80 34       	cpi	r24, 0x40	; 64
     fb2:	29 f0       	breq	.+10     	; 0xfbe <spi_setup_master+0x42>
     fb4:	80 38       	cpi	r24, 0x80	; 128
     fb6:	51 f4       	brne	.+20     	; 0xfcc <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1<<SPR00);
     fb8:	8c b5       	in	r24, 0x2c	; 44
     fba:	81 60       	ori	r24, 0x01	; 1
     fbc:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
     fbe:	8c b5       	in	r24, 0x2c	; 44
     fc0:	82 60       	ori	r24, 0x02	; 2
     fc2:	8c bd       	out	0x2c, r24	; 44
			break;
     fc4:	03 c0       	rjmp	.+6      	; 0xfcc <spi_setup_master+0x50>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
     fc6:	8c b5       	in	r24, 0x2c	; 44
     fc8:	81 60       	ori	r24, 0x01	; 1
     fca:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
     fcc:	85 b1       	in	r24, 0x05	; 5
     fce:	8f 7e       	andi	r24, 0xEF	; 239
     fd0:	85 b9       	out	0x05, r24	; 5
     fd2:	08 95       	ret

00000fd4 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
     fd4:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
     fd6:	0d b4       	in	r0, 0x2d	; 45
     fd8:	07 fe       	sbrs	r0, 7
     fda:	fd cf       	rjmp	.-6      	; 0xfd6 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
     fdc:	8e b5       	in	r24, 0x2e	; 46
     fde:	08 95       	ret

00000fe0 <move_terminal_cursor>:
	printf_P(PSTR("\x1b[K"));
}

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
}
     fe0:	9f 93       	push	r25
     fe2:	8f 93       	push	r24
     fe4:	7f 93       	push	r23
     fe6:	6f 93       	push	r22
     fe8:	82 e3       	ldi	r24, 0x32	; 50
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	9f 93       	push	r25
     fee:	8f 93       	push	r24
     ff0:	0e 94 df 08 	call	0x11be	; 0x11be <printf_P>
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	08 95       	ret

00001002 <clear_terminal>:
    1002:	8d e2       	ldi	r24, 0x2D	; 45
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	9f 93       	push	r25
    1008:	8f 93       	push	r24
    100a:	0e 94 df 08 	call	0x11be	; 0x11be <printf_P>
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	08 95       	ret

00001014 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    1014:	86 e2       	ldi	r24, 0x26	; 38
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	9f 93       	push	r25
    101a:	8f 93       	push	r24
    101c:	0e 94 df 08 	call	0x11be	; 0x11be <printf_P>
}
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	08 95       	ret

00001026 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    1026:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <clockTicks>
    102a:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <clockTicks+0x1>
    102e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <clockTicks+0x2>
    1032:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    1036:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1038:	8c e7       	ldi	r24, 0x7C	; 124
    103a:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    1044:	ee e6       	ldi	r30, 0x6E	; 110
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	82 60       	ori	r24, 0x02	; 2
    104c:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    104e:	85 b3       	in	r24, 0x15	; 21
    1050:	82 70       	andi	r24, 0x02	; 2
    1052:	85 bb       	out	0x15, r24	; 21
    1054:	08 95       	ret

00001056 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    1056:	8f b7       	in	r24, 0x3f	; 63
    1058:	28 2f       	mov	r18, r24
    105a:	20 78       	andi	r18, 0x80	; 128
	cli();
    105c:	f8 94       	cli
	returnValue = clockTicks;
    105e:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <clockTicks>
    1062:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <clockTicks+0x1>
    1066:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <clockTicks+0x2>
    106a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <clockTicks+0x3>
	if(interruptsOn) {
    106e:	22 23       	and	r18, r18
    1070:	09 f0       	breq	.+2      	; 0x1074 <get_current_time+0x1e>
		sei();
    1072:	78 94       	sei
	}
	return returnValue;
}
    1074:	08 95       	ret

00001076 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    1076:	1f 92       	push	r1
    1078:	0f 92       	push	r0
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	0f 92       	push	r0
    107e:	11 24       	eor	r1, r1
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	af 93       	push	r26
    1086:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
    1088:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <clockTicks>
    108c:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <clockTicks+0x1>
    1090:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <clockTicks+0x2>
    1094:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <clockTicks+0x3>
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	a1 1d       	adc	r26, r1
    109c:	b1 1d       	adc	r27, r1
    109e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <clockTicks>
    10a2:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <clockTicks+0x1>
    10a6:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <clockTicks+0x2>
    10aa:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <clockTicks+0x3>
}
    10ae:	bf 91       	pop	r27
    10b0:	af 91       	pop	r26
    10b2:	9f 91       	pop	r25
    10b4:	8f 91       	pop	r24
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f 90       	pop	r0
    10bc:	1f 90       	pop	r1
    10be:	18 95       	reti

000010c0 <__divmodsi4>:
    10c0:	05 2e       	mov	r0, r21
    10c2:	97 fb       	bst	r25, 7
    10c4:	1e f4       	brtc	.+6      	; 0x10cc <__divmodsi4+0xc>
    10c6:	00 94       	com	r0
    10c8:	0e 94 77 08 	call	0x10ee	; 0x10ee <__negsi2>
    10cc:	57 fd       	sbrc	r21, 7
    10ce:	07 d0       	rcall	.+14     	; 0x10de <__divmodsi4_neg2>
    10d0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__udivmodsi4>
    10d4:	07 fc       	sbrc	r0, 7
    10d6:	03 d0       	rcall	.+6      	; 0x10de <__divmodsi4_neg2>
    10d8:	4e f4       	brtc	.+18     	; 0x10ec <__divmodsi4_exit>
    10da:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__negsi2>

000010de <__divmodsi4_neg2>:
    10de:	50 95       	com	r21
    10e0:	40 95       	com	r20
    10e2:	30 95       	com	r19
    10e4:	21 95       	neg	r18
    10e6:	3f 4f       	sbci	r19, 0xFF	; 255
    10e8:	4f 4f       	sbci	r20, 0xFF	; 255
    10ea:	5f 4f       	sbci	r21, 0xFF	; 255

000010ec <__divmodsi4_exit>:
    10ec:	08 95       	ret

000010ee <__negsi2>:
    10ee:	90 95       	com	r25
    10f0:	80 95       	com	r24
    10f2:	70 95       	com	r23
    10f4:	61 95       	neg	r22
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	8f 4f       	sbci	r24, 0xFF	; 255
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	08 95       	ret

000010fe <__udivmodsi4>:
    10fe:	a1 e2       	ldi	r26, 0x21	; 33
    1100:	1a 2e       	mov	r1, r26
    1102:	aa 1b       	sub	r26, r26
    1104:	bb 1b       	sub	r27, r27
    1106:	fd 01       	movw	r30, r26
    1108:	0d c0       	rjmp	.+26     	; 0x1124 <__udivmodsi4_ep>

0000110a <__udivmodsi4_loop>:
    110a:	aa 1f       	adc	r26, r26
    110c:	bb 1f       	adc	r27, r27
    110e:	ee 1f       	adc	r30, r30
    1110:	ff 1f       	adc	r31, r31
    1112:	a2 17       	cp	r26, r18
    1114:	b3 07       	cpc	r27, r19
    1116:	e4 07       	cpc	r30, r20
    1118:	f5 07       	cpc	r31, r21
    111a:	20 f0       	brcs	.+8      	; 0x1124 <__udivmodsi4_ep>
    111c:	a2 1b       	sub	r26, r18
    111e:	b3 0b       	sbc	r27, r19
    1120:	e4 0b       	sbc	r30, r20
    1122:	f5 0b       	sbc	r31, r21

00001124 <__udivmodsi4_ep>:
    1124:	66 1f       	adc	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	88 1f       	adc	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	1a 94       	dec	r1
    112e:	69 f7       	brne	.-38     	; 0x110a <__udivmodsi4_loop>
    1130:	60 95       	com	r22
    1132:	70 95       	com	r23
    1134:	80 95       	com	r24
    1136:	90 95       	com	r25
    1138:	9b 01       	movw	r18, r22
    113a:	ac 01       	movw	r20, r24
    113c:	bd 01       	movw	r22, r26
    113e:	cf 01       	movw	r24, r30
    1140:	08 95       	ret

00001142 <fgetc>:
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	ec 01       	movw	r28, r24
    1148:	2b 81       	ldd	r18, Y+3	; 0x03
    114a:	20 ff       	sbrs	r18, 0
    114c:	33 c0       	rjmp	.+102    	; 0x11b4 <fgetc+0x72>
    114e:	26 ff       	sbrs	r18, 6
    1150:	0a c0       	rjmp	.+20     	; 0x1166 <fgetc+0x24>
    1152:	2f 7b       	andi	r18, 0xBF	; 191
    1154:	2b 83       	std	Y+3, r18	; 0x03
    1156:	8e 81       	ldd	r24, Y+6	; 0x06
    1158:	9f 81       	ldd	r25, Y+7	; 0x07
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	9f 83       	std	Y+7, r25	; 0x07
    115e:	8e 83       	std	Y+6, r24	; 0x06
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	29 c0       	rjmp	.+82     	; 0x11b8 <fgetc+0x76>
    1166:	22 ff       	sbrs	r18, 2
    1168:	0f c0       	rjmp	.+30     	; 0x1188 <fgetc+0x46>
    116a:	e8 81       	ld	r30, Y
    116c:	f9 81       	ldd	r31, Y+1	; 0x01
    116e:	80 81       	ld	r24, Z
    1170:	08 2e       	mov	r0, r24
    1172:	00 0c       	add	r0, r0
    1174:	99 0b       	sbc	r25, r25
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	19 f4       	brne	.+6      	; 0x1180 <fgetc+0x3e>
    117a:	20 62       	ori	r18, 0x20	; 32
    117c:	2b 83       	std	Y+3, r18	; 0x03
    117e:	1a c0       	rjmp	.+52     	; 0x11b4 <fgetc+0x72>
    1180:	31 96       	adiw	r30, 0x01	; 1
    1182:	f9 83       	std	Y+1, r31	; 0x01
    1184:	e8 83       	st	Y, r30
    1186:	0e c0       	rjmp	.+28     	; 0x11a4 <fgetc+0x62>
    1188:	ea 85       	ldd	r30, Y+10	; 0x0a
    118a:	fb 85       	ldd	r31, Y+11	; 0x0b
    118c:	09 95       	icall
    118e:	97 ff       	sbrs	r25, 7
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <fgetc+0x62>
    1192:	2b 81       	ldd	r18, Y+3	; 0x03
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	11 f0       	breq	.+4      	; 0x119c <fgetc+0x5a>
    1198:	80 e2       	ldi	r24, 0x20	; 32
    119a:	01 c0       	rjmp	.+2      	; 0x119e <fgetc+0x5c>
    119c:	80 e1       	ldi	r24, 0x10	; 16
    119e:	82 2b       	or	r24, r18
    11a0:	8b 83       	std	Y+3, r24	; 0x03
    11a2:	08 c0       	rjmp	.+16     	; 0x11b4 <fgetc+0x72>
    11a4:	2e 81       	ldd	r18, Y+6	; 0x06
    11a6:	3f 81       	ldd	r19, Y+7	; 0x07
    11a8:	2f 5f       	subi	r18, 0xFF	; 255
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	3f 83       	std	Y+7, r19	; 0x07
    11ae:	2e 83       	std	Y+6, r18	; 0x06
    11b0:	99 27       	eor	r25, r25
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <fgetc+0x76>
    11b4:	8f ef       	ldi	r24, 0xFF	; 255
    11b6:	9f ef       	ldi	r25, 0xFF	; 255
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	08 95       	ret

000011be <printf_P>:
    11be:	a0 e0       	ldi	r26, 0x00	; 0
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 ee       	ldi	r30, 0xE5	; 229
    11c4:	f8 e0       	ldi	r31, 0x08	; 8
    11c6:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__prologue_saves__+0x1c>
    11ca:	ae 01       	movw	r20, r28
    11cc:	49 5f       	subi	r20, 0xF9	; 249
    11ce:	5f 4f       	sbci	r21, 0xFF	; 255
    11d0:	da 01       	movw	r26, r20
    11d2:	6d 91       	ld	r22, X+
    11d4:	7d 91       	ld	r23, X+
    11d6:	ad 01       	movw	r20, r26
    11d8:	0c e9       	ldi	r16, 0x9C	; 156
    11da:	12 e0       	ldi	r17, 0x02	; 2
    11dc:	f8 01       	movw	r30, r16
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	dc 01       	movw	r26, r24
    11e4:	13 96       	adiw	r26, 0x03	; 3
    11e6:	2c 91       	ld	r18, X
    11e8:	13 97       	sbiw	r26, 0x03	; 3
    11ea:	28 60       	ori	r18, 0x08	; 8
    11ec:	13 96       	adiw	r26, 0x03	; 3
    11ee:	2c 93       	st	X, r18
    11f0:	0e 94 05 09 	call	0x120a	; 0x120a <vfprintf>
    11f4:	d8 01       	movw	r26, r16
    11f6:	12 96       	adiw	r26, 0x02	; 2
    11f8:	ed 91       	ld	r30, X+
    11fa:	fc 91       	ld	r31, X
    11fc:	13 97       	sbiw	r26, 0x03	; 3
    11fe:	23 81       	ldd	r18, Z+3	; 0x03
    1200:	27 7f       	andi	r18, 0xF7	; 247
    1202:	23 83       	std	Z+3, r18	; 0x03
    1204:	e4 e0       	ldi	r30, 0x04	; 4
    1206:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__epilogue_restores__+0x1c>

0000120a <vfprintf>:
    120a:	ab e0       	ldi	r26, 0x0B	; 11
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e0       	ldi	r30, 0x0B	; 11
    1210:	f9 e0       	ldi	r31, 0x09	; 9
    1212:	0c 94 96 0b 	jmp	0x172c	; 0x172c <__prologue_saves__>
    1216:	6c 01       	movw	r12, r24
    1218:	7b 01       	movw	r14, r22
    121a:	8a 01       	movw	r16, r20
    121c:	fc 01       	movw	r30, r24
    121e:	17 82       	std	Z+7, r1	; 0x07
    1220:	16 82       	std	Z+6, r1	; 0x06
    1222:	83 81       	ldd	r24, Z+3	; 0x03
    1224:	81 ff       	sbrs	r24, 1
    1226:	cc c1       	rjmp	.+920    	; 0x15c0 <vfprintf+0x3b6>
    1228:	ce 01       	movw	r24, r28
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	3c 01       	movw	r6, r24
    122e:	f6 01       	movw	r30, r12
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	f7 01       	movw	r30, r14
    1234:	93 fd       	sbrc	r25, 3
    1236:	85 91       	lpm	r24, Z+
    1238:	93 ff       	sbrs	r25, 3
    123a:	81 91       	ld	r24, Z+
    123c:	7f 01       	movw	r14, r30
    123e:	88 23       	and	r24, r24
    1240:	09 f4       	brne	.+2      	; 0x1244 <vfprintf+0x3a>
    1242:	ba c1       	rjmp	.+884    	; 0x15b8 <vfprintf+0x3ae>
    1244:	85 32       	cpi	r24, 0x25	; 37
    1246:	39 f4       	brne	.+14     	; 0x1256 <vfprintf+0x4c>
    1248:	93 fd       	sbrc	r25, 3
    124a:	85 91       	lpm	r24, Z+
    124c:	93 ff       	sbrs	r25, 3
    124e:	81 91       	ld	r24, Z+
    1250:	7f 01       	movw	r14, r30
    1252:	85 32       	cpi	r24, 0x25	; 37
    1254:	29 f4       	brne	.+10     	; 0x1260 <vfprintf+0x56>
    1256:	b6 01       	movw	r22, r12
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <fputc>
    125e:	e7 cf       	rjmp	.-50     	; 0x122e <vfprintf+0x24>
    1260:	91 2c       	mov	r9, r1
    1262:	21 2c       	mov	r2, r1
    1264:	31 2c       	mov	r3, r1
    1266:	ff e1       	ldi	r31, 0x1F	; 31
    1268:	f3 15       	cp	r31, r3
    126a:	d8 f0       	brcs	.+54     	; 0x12a2 <vfprintf+0x98>
    126c:	8b 32       	cpi	r24, 0x2B	; 43
    126e:	79 f0       	breq	.+30     	; 0x128e <vfprintf+0x84>
    1270:	38 f4       	brcc	.+14     	; 0x1280 <vfprintf+0x76>
    1272:	80 32       	cpi	r24, 0x20	; 32
    1274:	79 f0       	breq	.+30     	; 0x1294 <vfprintf+0x8a>
    1276:	83 32       	cpi	r24, 0x23	; 35
    1278:	a1 f4       	brne	.+40     	; 0x12a2 <vfprintf+0x98>
    127a:	23 2d       	mov	r18, r3
    127c:	20 61       	ori	r18, 0x10	; 16
    127e:	1d c0       	rjmp	.+58     	; 0x12ba <vfprintf+0xb0>
    1280:	8d 32       	cpi	r24, 0x2D	; 45
    1282:	61 f0       	breq	.+24     	; 0x129c <vfprintf+0x92>
    1284:	80 33       	cpi	r24, 0x30	; 48
    1286:	69 f4       	brne	.+26     	; 0x12a2 <vfprintf+0x98>
    1288:	23 2d       	mov	r18, r3
    128a:	21 60       	ori	r18, 0x01	; 1
    128c:	16 c0       	rjmp	.+44     	; 0x12ba <vfprintf+0xb0>
    128e:	83 2d       	mov	r24, r3
    1290:	82 60       	ori	r24, 0x02	; 2
    1292:	38 2e       	mov	r3, r24
    1294:	e3 2d       	mov	r30, r3
    1296:	e4 60       	ori	r30, 0x04	; 4
    1298:	3e 2e       	mov	r3, r30
    129a:	2a c0       	rjmp	.+84     	; 0x12f0 <vfprintf+0xe6>
    129c:	f3 2d       	mov	r31, r3
    129e:	f8 60       	ori	r31, 0x08	; 8
    12a0:	1d c0       	rjmp	.+58     	; 0x12dc <vfprintf+0xd2>
    12a2:	37 fc       	sbrc	r3, 7
    12a4:	2d c0       	rjmp	.+90     	; 0x1300 <vfprintf+0xf6>
    12a6:	20 ed       	ldi	r18, 0xD0	; 208
    12a8:	28 0f       	add	r18, r24
    12aa:	2a 30       	cpi	r18, 0x0A	; 10
    12ac:	40 f0       	brcs	.+16     	; 0x12be <vfprintf+0xb4>
    12ae:	8e 32       	cpi	r24, 0x2E	; 46
    12b0:	b9 f4       	brne	.+46     	; 0x12e0 <vfprintf+0xd6>
    12b2:	36 fc       	sbrc	r3, 6
    12b4:	81 c1       	rjmp	.+770    	; 0x15b8 <vfprintf+0x3ae>
    12b6:	23 2d       	mov	r18, r3
    12b8:	20 64       	ori	r18, 0x40	; 64
    12ba:	32 2e       	mov	r3, r18
    12bc:	19 c0       	rjmp	.+50     	; 0x12f0 <vfprintf+0xe6>
    12be:	36 fe       	sbrs	r3, 6
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <vfprintf+0xc4>
    12c2:	8a e0       	ldi	r24, 0x0A	; 10
    12c4:	98 9e       	mul	r9, r24
    12c6:	20 0d       	add	r18, r0
    12c8:	11 24       	eor	r1, r1
    12ca:	92 2e       	mov	r9, r18
    12cc:	11 c0       	rjmp	.+34     	; 0x12f0 <vfprintf+0xe6>
    12ce:	ea e0       	ldi	r30, 0x0A	; 10
    12d0:	2e 9e       	mul	r2, r30
    12d2:	20 0d       	add	r18, r0
    12d4:	11 24       	eor	r1, r1
    12d6:	22 2e       	mov	r2, r18
    12d8:	f3 2d       	mov	r31, r3
    12da:	f0 62       	ori	r31, 0x20	; 32
    12dc:	3f 2e       	mov	r3, r31
    12de:	08 c0       	rjmp	.+16     	; 0x12f0 <vfprintf+0xe6>
    12e0:	8c 36       	cpi	r24, 0x6C	; 108
    12e2:	21 f4       	brne	.+8      	; 0x12ec <vfprintf+0xe2>
    12e4:	83 2d       	mov	r24, r3
    12e6:	80 68       	ori	r24, 0x80	; 128
    12e8:	38 2e       	mov	r3, r24
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <vfprintf+0xe6>
    12ec:	88 36       	cpi	r24, 0x68	; 104
    12ee:	41 f4       	brne	.+16     	; 0x1300 <vfprintf+0xf6>
    12f0:	f7 01       	movw	r30, r14
    12f2:	93 fd       	sbrc	r25, 3
    12f4:	85 91       	lpm	r24, Z+
    12f6:	93 ff       	sbrs	r25, 3
    12f8:	81 91       	ld	r24, Z+
    12fa:	7f 01       	movw	r14, r30
    12fc:	81 11       	cpse	r24, r1
    12fe:	b3 cf       	rjmp	.-154    	; 0x1266 <vfprintf+0x5c>
    1300:	98 2f       	mov	r25, r24
    1302:	9f 7d       	andi	r25, 0xDF	; 223
    1304:	95 54       	subi	r25, 0x45	; 69
    1306:	93 30       	cpi	r25, 0x03	; 3
    1308:	28 f4       	brcc	.+10     	; 0x1314 <vfprintf+0x10a>
    130a:	0c 5f       	subi	r16, 0xFC	; 252
    130c:	1f 4f       	sbci	r17, 0xFF	; 255
    130e:	9f e3       	ldi	r25, 0x3F	; 63
    1310:	99 83       	std	Y+1, r25	; 0x01
    1312:	0d c0       	rjmp	.+26     	; 0x132e <vfprintf+0x124>
    1314:	83 36       	cpi	r24, 0x63	; 99
    1316:	31 f0       	breq	.+12     	; 0x1324 <vfprintf+0x11a>
    1318:	83 37       	cpi	r24, 0x73	; 115
    131a:	71 f0       	breq	.+28     	; 0x1338 <vfprintf+0x12e>
    131c:	83 35       	cpi	r24, 0x53	; 83
    131e:	09 f0       	breq	.+2      	; 0x1322 <vfprintf+0x118>
    1320:	59 c0       	rjmp	.+178    	; 0x13d4 <vfprintf+0x1ca>
    1322:	21 c0       	rjmp	.+66     	; 0x1366 <vfprintf+0x15c>
    1324:	f8 01       	movw	r30, r16
    1326:	80 81       	ld	r24, Z
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	0e 5f       	subi	r16, 0xFE	; 254
    132c:	1f 4f       	sbci	r17, 0xFF	; 255
    132e:	88 24       	eor	r8, r8
    1330:	83 94       	inc	r8
    1332:	91 2c       	mov	r9, r1
    1334:	53 01       	movw	r10, r6
    1336:	13 c0       	rjmp	.+38     	; 0x135e <vfprintf+0x154>
    1338:	28 01       	movw	r4, r16
    133a:	f2 e0       	ldi	r31, 0x02	; 2
    133c:	4f 0e       	add	r4, r31
    133e:	51 1c       	adc	r5, r1
    1340:	f8 01       	movw	r30, r16
    1342:	a0 80       	ld	r10, Z
    1344:	b1 80       	ldd	r11, Z+1	; 0x01
    1346:	36 fe       	sbrs	r3, 6
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <vfprintf+0x146>
    134a:	69 2d       	mov	r22, r9
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0x14a>
    1350:	6f ef       	ldi	r22, 0xFF	; 255
    1352:	7f ef       	ldi	r23, 0xFF	; 255
    1354:	c5 01       	movw	r24, r10
    1356:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <strnlen>
    135a:	4c 01       	movw	r8, r24
    135c:	82 01       	movw	r16, r4
    135e:	f3 2d       	mov	r31, r3
    1360:	ff 77       	andi	r31, 0x7F	; 127
    1362:	3f 2e       	mov	r3, r31
    1364:	16 c0       	rjmp	.+44     	; 0x1392 <vfprintf+0x188>
    1366:	28 01       	movw	r4, r16
    1368:	22 e0       	ldi	r18, 0x02	; 2
    136a:	42 0e       	add	r4, r18
    136c:	51 1c       	adc	r5, r1
    136e:	f8 01       	movw	r30, r16
    1370:	a0 80       	ld	r10, Z
    1372:	b1 80       	ldd	r11, Z+1	; 0x01
    1374:	36 fe       	sbrs	r3, 6
    1376:	03 c0       	rjmp	.+6      	; 0x137e <vfprintf+0x174>
    1378:	69 2d       	mov	r22, r9
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <vfprintf+0x178>
    137e:	6f ef       	ldi	r22, 0xFF	; 255
    1380:	7f ef       	ldi	r23, 0xFF	; 255
    1382:	c5 01       	movw	r24, r10
    1384:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <strnlen_P>
    1388:	4c 01       	movw	r8, r24
    138a:	f3 2d       	mov	r31, r3
    138c:	f0 68       	ori	r31, 0x80	; 128
    138e:	3f 2e       	mov	r3, r31
    1390:	82 01       	movw	r16, r4
    1392:	33 fc       	sbrc	r3, 3
    1394:	1b c0       	rjmp	.+54     	; 0x13cc <vfprintf+0x1c2>
    1396:	82 2d       	mov	r24, r2
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	88 16       	cp	r8, r24
    139c:	99 06       	cpc	r9, r25
    139e:	b0 f4       	brcc	.+44     	; 0x13cc <vfprintf+0x1c2>
    13a0:	b6 01       	movw	r22, r12
    13a2:	80 e2       	ldi	r24, 0x20	; 32
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <fputc>
    13aa:	2a 94       	dec	r2
    13ac:	f4 cf       	rjmp	.-24     	; 0x1396 <vfprintf+0x18c>
    13ae:	f5 01       	movw	r30, r10
    13b0:	37 fc       	sbrc	r3, 7
    13b2:	85 91       	lpm	r24, Z+
    13b4:	37 fe       	sbrs	r3, 7
    13b6:	81 91       	ld	r24, Z+
    13b8:	5f 01       	movw	r10, r30
    13ba:	b6 01       	movw	r22, r12
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <fputc>
    13c2:	21 10       	cpse	r2, r1
    13c4:	2a 94       	dec	r2
    13c6:	21 e0       	ldi	r18, 0x01	; 1
    13c8:	82 1a       	sub	r8, r18
    13ca:	91 08       	sbc	r9, r1
    13cc:	81 14       	cp	r8, r1
    13ce:	91 04       	cpc	r9, r1
    13d0:	71 f7       	brne	.-36     	; 0x13ae <vfprintf+0x1a4>
    13d2:	e8 c0       	rjmp	.+464    	; 0x15a4 <vfprintf+0x39a>
    13d4:	84 36       	cpi	r24, 0x64	; 100
    13d6:	11 f0       	breq	.+4      	; 0x13dc <vfprintf+0x1d2>
    13d8:	89 36       	cpi	r24, 0x69	; 105
    13da:	41 f5       	brne	.+80     	; 0x142c <vfprintf+0x222>
    13dc:	f8 01       	movw	r30, r16
    13de:	37 fe       	sbrs	r3, 7
    13e0:	07 c0       	rjmp	.+14     	; 0x13f0 <vfprintf+0x1e6>
    13e2:	60 81       	ld	r22, Z
    13e4:	71 81       	ldd	r23, Z+1	; 0x01
    13e6:	82 81       	ldd	r24, Z+2	; 0x02
    13e8:	93 81       	ldd	r25, Z+3	; 0x03
    13ea:	0c 5f       	subi	r16, 0xFC	; 252
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
    13ee:	08 c0       	rjmp	.+16     	; 0x1400 <vfprintf+0x1f6>
    13f0:	60 81       	ld	r22, Z
    13f2:	71 81       	ldd	r23, Z+1	; 0x01
    13f4:	07 2e       	mov	r0, r23
    13f6:	00 0c       	add	r0, r0
    13f8:	88 0b       	sbc	r24, r24
    13fa:	99 0b       	sbc	r25, r25
    13fc:	0e 5f       	subi	r16, 0xFE	; 254
    13fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1400:	f3 2d       	mov	r31, r3
    1402:	ff 76       	andi	r31, 0x6F	; 111
    1404:	3f 2e       	mov	r3, r31
    1406:	97 ff       	sbrs	r25, 7
    1408:	09 c0       	rjmp	.+18     	; 0x141c <vfprintf+0x212>
    140a:	90 95       	com	r25
    140c:	80 95       	com	r24
    140e:	70 95       	com	r23
    1410:	61 95       	neg	r22
    1412:	7f 4f       	sbci	r23, 0xFF	; 255
    1414:	8f 4f       	sbci	r24, 0xFF	; 255
    1416:	9f 4f       	sbci	r25, 0xFF	; 255
    1418:	f0 68       	ori	r31, 0x80	; 128
    141a:	3f 2e       	mov	r3, r31
    141c:	2a e0       	ldi	r18, 0x0A	; 10
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	a3 01       	movw	r20, r6
    1422:	0e 94 38 0b 	call	0x1670	; 0x1670 <__ultoa_invert>
    1426:	88 2e       	mov	r8, r24
    1428:	86 18       	sub	r8, r6
    142a:	45 c0       	rjmp	.+138    	; 0x14b6 <vfprintf+0x2ac>
    142c:	85 37       	cpi	r24, 0x75	; 117
    142e:	31 f4       	brne	.+12     	; 0x143c <vfprintf+0x232>
    1430:	23 2d       	mov	r18, r3
    1432:	2f 7e       	andi	r18, 0xEF	; 239
    1434:	b2 2e       	mov	r11, r18
    1436:	2a e0       	ldi	r18, 0x0A	; 10
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	25 c0       	rjmp	.+74     	; 0x1486 <vfprintf+0x27c>
    143c:	93 2d       	mov	r25, r3
    143e:	99 7f       	andi	r25, 0xF9	; 249
    1440:	b9 2e       	mov	r11, r25
    1442:	8f 36       	cpi	r24, 0x6F	; 111
    1444:	c1 f0       	breq	.+48     	; 0x1476 <vfprintf+0x26c>
    1446:	18 f4       	brcc	.+6      	; 0x144e <vfprintf+0x244>
    1448:	88 35       	cpi	r24, 0x58	; 88
    144a:	79 f0       	breq	.+30     	; 0x146a <vfprintf+0x260>
    144c:	b5 c0       	rjmp	.+362    	; 0x15b8 <vfprintf+0x3ae>
    144e:	80 37       	cpi	r24, 0x70	; 112
    1450:	19 f0       	breq	.+6      	; 0x1458 <vfprintf+0x24e>
    1452:	88 37       	cpi	r24, 0x78	; 120
    1454:	21 f0       	breq	.+8      	; 0x145e <vfprintf+0x254>
    1456:	b0 c0       	rjmp	.+352    	; 0x15b8 <vfprintf+0x3ae>
    1458:	e9 2f       	mov	r30, r25
    145a:	e0 61       	ori	r30, 0x10	; 16
    145c:	be 2e       	mov	r11, r30
    145e:	b4 fe       	sbrs	r11, 4
    1460:	0d c0       	rjmp	.+26     	; 0x147c <vfprintf+0x272>
    1462:	fb 2d       	mov	r31, r11
    1464:	f4 60       	ori	r31, 0x04	; 4
    1466:	bf 2e       	mov	r11, r31
    1468:	09 c0       	rjmp	.+18     	; 0x147c <vfprintf+0x272>
    146a:	34 fe       	sbrs	r3, 4
    146c:	0a c0       	rjmp	.+20     	; 0x1482 <vfprintf+0x278>
    146e:	29 2f       	mov	r18, r25
    1470:	26 60       	ori	r18, 0x06	; 6
    1472:	b2 2e       	mov	r11, r18
    1474:	06 c0       	rjmp	.+12     	; 0x1482 <vfprintf+0x278>
    1476:	28 e0       	ldi	r18, 0x08	; 8
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	05 c0       	rjmp	.+10     	; 0x1486 <vfprintf+0x27c>
    147c:	20 e1       	ldi	r18, 0x10	; 16
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <vfprintf+0x27c>
    1482:	20 e1       	ldi	r18, 0x10	; 16
    1484:	32 e0       	ldi	r19, 0x02	; 2
    1486:	f8 01       	movw	r30, r16
    1488:	b7 fe       	sbrs	r11, 7
    148a:	07 c0       	rjmp	.+14     	; 0x149a <vfprintf+0x290>
    148c:	60 81       	ld	r22, Z
    148e:	71 81       	ldd	r23, Z+1	; 0x01
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	93 81       	ldd	r25, Z+3	; 0x03
    1494:	0c 5f       	subi	r16, 0xFC	; 252
    1496:	1f 4f       	sbci	r17, 0xFF	; 255
    1498:	06 c0       	rjmp	.+12     	; 0x14a6 <vfprintf+0x29c>
    149a:	60 81       	ld	r22, Z
    149c:	71 81       	ldd	r23, Z+1	; 0x01
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	0e 5f       	subi	r16, 0xFE	; 254
    14a4:	1f 4f       	sbci	r17, 0xFF	; 255
    14a6:	a3 01       	movw	r20, r6
    14a8:	0e 94 38 0b 	call	0x1670	; 0x1670 <__ultoa_invert>
    14ac:	88 2e       	mov	r8, r24
    14ae:	86 18       	sub	r8, r6
    14b0:	fb 2d       	mov	r31, r11
    14b2:	ff 77       	andi	r31, 0x7F	; 127
    14b4:	3f 2e       	mov	r3, r31
    14b6:	36 fe       	sbrs	r3, 6
    14b8:	0d c0       	rjmp	.+26     	; 0x14d4 <vfprintf+0x2ca>
    14ba:	23 2d       	mov	r18, r3
    14bc:	2e 7f       	andi	r18, 0xFE	; 254
    14be:	a2 2e       	mov	r10, r18
    14c0:	89 14       	cp	r8, r9
    14c2:	58 f4       	brcc	.+22     	; 0x14da <vfprintf+0x2d0>
    14c4:	34 fe       	sbrs	r3, 4
    14c6:	0b c0       	rjmp	.+22     	; 0x14de <vfprintf+0x2d4>
    14c8:	32 fc       	sbrc	r3, 2
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <vfprintf+0x2d4>
    14cc:	83 2d       	mov	r24, r3
    14ce:	8e 7e       	andi	r24, 0xEE	; 238
    14d0:	a8 2e       	mov	r10, r24
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <vfprintf+0x2d4>
    14d4:	b8 2c       	mov	r11, r8
    14d6:	a3 2c       	mov	r10, r3
    14d8:	03 c0       	rjmp	.+6      	; 0x14e0 <vfprintf+0x2d6>
    14da:	b8 2c       	mov	r11, r8
    14dc:	01 c0       	rjmp	.+2      	; 0x14e0 <vfprintf+0x2d6>
    14de:	b9 2c       	mov	r11, r9
    14e0:	a4 fe       	sbrs	r10, 4
    14e2:	0f c0       	rjmp	.+30     	; 0x1502 <vfprintf+0x2f8>
    14e4:	fe 01       	movw	r30, r28
    14e6:	e8 0d       	add	r30, r8
    14e8:	f1 1d       	adc	r31, r1
    14ea:	80 81       	ld	r24, Z
    14ec:	80 33       	cpi	r24, 0x30	; 48
    14ee:	21 f4       	brne	.+8      	; 0x14f8 <vfprintf+0x2ee>
    14f0:	9a 2d       	mov	r25, r10
    14f2:	99 7e       	andi	r25, 0xE9	; 233
    14f4:	a9 2e       	mov	r10, r25
    14f6:	09 c0       	rjmp	.+18     	; 0x150a <vfprintf+0x300>
    14f8:	a2 fe       	sbrs	r10, 2
    14fa:	06 c0       	rjmp	.+12     	; 0x1508 <vfprintf+0x2fe>
    14fc:	b3 94       	inc	r11
    14fe:	b3 94       	inc	r11
    1500:	04 c0       	rjmp	.+8      	; 0x150a <vfprintf+0x300>
    1502:	8a 2d       	mov	r24, r10
    1504:	86 78       	andi	r24, 0x86	; 134
    1506:	09 f0       	breq	.+2      	; 0x150a <vfprintf+0x300>
    1508:	b3 94       	inc	r11
    150a:	a3 fc       	sbrc	r10, 3
    150c:	11 c0       	rjmp	.+34     	; 0x1530 <vfprintf+0x326>
    150e:	a0 fe       	sbrs	r10, 0
    1510:	06 c0       	rjmp	.+12     	; 0x151e <vfprintf+0x314>
    1512:	b2 14       	cp	r11, r2
    1514:	88 f4       	brcc	.+34     	; 0x1538 <vfprintf+0x32e>
    1516:	28 0c       	add	r2, r8
    1518:	92 2c       	mov	r9, r2
    151a:	9b 18       	sub	r9, r11
    151c:	0e c0       	rjmp	.+28     	; 0x153a <vfprintf+0x330>
    151e:	b2 14       	cp	r11, r2
    1520:	60 f4       	brcc	.+24     	; 0x153a <vfprintf+0x330>
    1522:	b6 01       	movw	r22, r12
    1524:	80 e2       	ldi	r24, 0x20	; 32
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <fputc>
    152c:	b3 94       	inc	r11
    152e:	f7 cf       	rjmp	.-18     	; 0x151e <vfprintf+0x314>
    1530:	b2 14       	cp	r11, r2
    1532:	18 f4       	brcc	.+6      	; 0x153a <vfprintf+0x330>
    1534:	2b 18       	sub	r2, r11
    1536:	02 c0       	rjmp	.+4      	; 0x153c <vfprintf+0x332>
    1538:	98 2c       	mov	r9, r8
    153a:	21 2c       	mov	r2, r1
    153c:	a4 fe       	sbrs	r10, 4
    153e:	10 c0       	rjmp	.+32     	; 0x1560 <vfprintf+0x356>
    1540:	b6 01       	movw	r22, r12
    1542:	80 e3       	ldi	r24, 0x30	; 48
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <fputc>
    154a:	a2 fe       	sbrs	r10, 2
    154c:	17 c0       	rjmp	.+46     	; 0x157c <vfprintf+0x372>
    154e:	a1 fc       	sbrc	r10, 1
    1550:	03 c0       	rjmp	.+6      	; 0x1558 <vfprintf+0x34e>
    1552:	88 e7       	ldi	r24, 0x78	; 120
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <vfprintf+0x352>
    1558:	88 e5       	ldi	r24, 0x58	; 88
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	b6 01       	movw	r22, r12
    155e:	0c c0       	rjmp	.+24     	; 0x1578 <vfprintf+0x36e>
    1560:	8a 2d       	mov	r24, r10
    1562:	86 78       	andi	r24, 0x86	; 134
    1564:	59 f0       	breq	.+22     	; 0x157c <vfprintf+0x372>
    1566:	a1 fe       	sbrs	r10, 1
    1568:	02 c0       	rjmp	.+4      	; 0x156e <vfprintf+0x364>
    156a:	8b e2       	ldi	r24, 0x2B	; 43
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <vfprintf+0x366>
    156e:	80 e2       	ldi	r24, 0x20	; 32
    1570:	a7 fc       	sbrc	r10, 7
    1572:	8d e2       	ldi	r24, 0x2D	; 45
    1574:	b6 01       	movw	r22, r12
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <fputc>
    157c:	89 14       	cp	r8, r9
    157e:	38 f4       	brcc	.+14     	; 0x158e <vfprintf+0x384>
    1580:	b6 01       	movw	r22, r12
    1582:	80 e3       	ldi	r24, 0x30	; 48
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <fputc>
    158a:	9a 94       	dec	r9
    158c:	f7 cf       	rjmp	.-18     	; 0x157c <vfprintf+0x372>
    158e:	8a 94       	dec	r8
    1590:	f3 01       	movw	r30, r6
    1592:	e8 0d       	add	r30, r8
    1594:	f1 1d       	adc	r31, r1
    1596:	80 81       	ld	r24, Z
    1598:	b6 01       	movw	r22, r12
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <fputc>
    15a0:	81 10       	cpse	r8, r1
    15a2:	f5 cf       	rjmp	.-22     	; 0x158e <vfprintf+0x384>
    15a4:	22 20       	and	r2, r2
    15a6:	09 f4       	brne	.+2      	; 0x15aa <vfprintf+0x3a0>
    15a8:	42 ce       	rjmp	.-892    	; 0x122e <vfprintf+0x24>
    15aa:	b6 01       	movw	r22, r12
    15ac:	80 e2       	ldi	r24, 0x20	; 32
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <fputc>
    15b4:	2a 94       	dec	r2
    15b6:	f6 cf       	rjmp	.-20     	; 0x15a4 <vfprintf+0x39a>
    15b8:	f6 01       	movw	r30, r12
    15ba:	86 81       	ldd	r24, Z+6	; 0x06
    15bc:	97 81       	ldd	r25, Z+7	; 0x07
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <vfprintf+0x3ba>
    15c0:	8f ef       	ldi	r24, 0xFF	; 255
    15c2:	9f ef       	ldi	r25, 0xFF	; 255
    15c4:	2b 96       	adiw	r28, 0x0b	; 11
    15c6:	e2 e1       	ldi	r30, 0x12	; 18
    15c8:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__epilogue_restores__>

000015cc <strnlen_P>:
    15cc:	fc 01       	movw	r30, r24
    15ce:	05 90       	lpm	r0, Z+
    15d0:	61 50       	subi	r22, 0x01	; 1
    15d2:	70 40       	sbci	r23, 0x00	; 0
    15d4:	01 10       	cpse	r0, r1
    15d6:	d8 f7       	brcc	.-10     	; 0x15ce <strnlen_P+0x2>
    15d8:	80 95       	com	r24
    15da:	90 95       	com	r25
    15dc:	8e 0f       	add	r24, r30
    15de:	9f 1f       	adc	r25, r31
    15e0:	08 95       	ret

000015e2 <strnlen>:
    15e2:	fc 01       	movw	r30, r24
    15e4:	61 50       	subi	r22, 0x01	; 1
    15e6:	70 40       	sbci	r23, 0x00	; 0
    15e8:	01 90       	ld	r0, Z+
    15ea:	01 10       	cpse	r0, r1
    15ec:	d8 f7       	brcc	.-10     	; 0x15e4 <strnlen+0x2>
    15ee:	80 95       	com	r24
    15f0:	90 95       	com	r25
    15f2:	8e 0f       	add	r24, r30
    15f4:	9f 1f       	adc	r25, r31
    15f6:	08 95       	ret

000015f8 <fputc>:
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	fb 01       	movw	r30, r22
    1602:	23 81       	ldd	r18, Z+3	; 0x03
    1604:	21 fd       	sbrc	r18, 1
    1606:	03 c0       	rjmp	.+6      	; 0x160e <fputc+0x16>
    1608:	8f ef       	ldi	r24, 0xFF	; 255
    160a:	9f ef       	ldi	r25, 0xFF	; 255
    160c:	2c c0       	rjmp	.+88     	; 0x1666 <fputc+0x6e>
    160e:	22 ff       	sbrs	r18, 2
    1610:	16 c0       	rjmp	.+44     	; 0x163e <fputc+0x46>
    1612:	46 81       	ldd	r20, Z+6	; 0x06
    1614:	57 81       	ldd	r21, Z+7	; 0x07
    1616:	24 81       	ldd	r18, Z+4	; 0x04
    1618:	35 81       	ldd	r19, Z+5	; 0x05
    161a:	42 17       	cp	r20, r18
    161c:	53 07       	cpc	r21, r19
    161e:	44 f4       	brge	.+16     	; 0x1630 <fputc+0x38>
    1620:	a0 81       	ld	r26, Z
    1622:	b1 81       	ldd	r27, Z+1	; 0x01
    1624:	9d 01       	movw	r18, r26
    1626:	2f 5f       	subi	r18, 0xFF	; 255
    1628:	3f 4f       	sbci	r19, 0xFF	; 255
    162a:	31 83       	std	Z+1, r19	; 0x01
    162c:	20 83       	st	Z, r18
    162e:	8c 93       	st	X, r24
    1630:	26 81       	ldd	r18, Z+6	; 0x06
    1632:	37 81       	ldd	r19, Z+7	; 0x07
    1634:	2f 5f       	subi	r18, 0xFF	; 255
    1636:	3f 4f       	sbci	r19, 0xFF	; 255
    1638:	37 83       	std	Z+7, r19	; 0x07
    163a:	26 83       	std	Z+6, r18	; 0x06
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <fputc+0x6e>
    163e:	8b 01       	movw	r16, r22
    1640:	ec 01       	movw	r28, r24
    1642:	fb 01       	movw	r30, r22
    1644:	00 84       	ldd	r0, Z+8	; 0x08
    1646:	f1 85       	ldd	r31, Z+9	; 0x09
    1648:	e0 2d       	mov	r30, r0
    164a:	09 95       	icall
    164c:	89 2b       	or	r24, r25
    164e:	e1 f6       	brne	.-72     	; 0x1608 <fputc+0x10>
    1650:	d8 01       	movw	r26, r16
    1652:	16 96       	adiw	r26, 0x06	; 6
    1654:	8d 91       	ld	r24, X+
    1656:	9c 91       	ld	r25, X
    1658:	17 97       	sbiw	r26, 0x07	; 7
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	17 96       	adiw	r26, 0x07	; 7
    165e:	9c 93       	st	X, r25
    1660:	8e 93       	st	-X, r24
    1662:	16 97       	sbiw	r26, 0x06	; 6
    1664:	ce 01       	movw	r24, r28
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	08 95       	ret

00001670 <__ultoa_invert>:
    1670:	fa 01       	movw	r30, r20
    1672:	aa 27       	eor	r26, r26
    1674:	28 30       	cpi	r18, 0x08	; 8
    1676:	51 f1       	breq	.+84     	; 0x16cc <__ultoa_invert+0x5c>
    1678:	20 31       	cpi	r18, 0x10	; 16
    167a:	81 f1       	breq	.+96     	; 0x16dc <__ultoa_invert+0x6c>
    167c:	e8 94       	clt
    167e:	6f 93       	push	r22
    1680:	6e 7f       	andi	r22, 0xFE	; 254
    1682:	6e 5f       	subi	r22, 0xFE	; 254
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	8f 4f       	sbci	r24, 0xFF	; 255
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	af 4f       	sbci	r26, 0xFF	; 255
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	3e d0       	rcall	.+124    	; 0x170c <__ultoa_invert+0x9c>
    1690:	b4 e0       	ldi	r27, 0x04	; 4
    1692:	3c d0       	rcall	.+120    	; 0x170c <__ultoa_invert+0x9c>
    1694:	67 0f       	add	r22, r23
    1696:	78 1f       	adc	r23, r24
    1698:	89 1f       	adc	r24, r25
    169a:	9a 1f       	adc	r25, r26
    169c:	a1 1d       	adc	r26, r1
    169e:	68 0f       	add	r22, r24
    16a0:	79 1f       	adc	r23, r25
    16a2:	8a 1f       	adc	r24, r26
    16a4:	91 1d       	adc	r25, r1
    16a6:	a1 1d       	adc	r26, r1
    16a8:	6a 0f       	add	r22, r26
    16aa:	71 1d       	adc	r23, r1
    16ac:	81 1d       	adc	r24, r1
    16ae:	91 1d       	adc	r25, r1
    16b0:	a1 1d       	adc	r26, r1
    16b2:	20 d0       	rcall	.+64     	; 0x16f4 <__ultoa_invert+0x84>
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <__ultoa_invert+0x48>
    16b6:	68 94       	set
    16b8:	3f 91       	pop	r19
    16ba:	2a e0       	ldi	r18, 0x0A	; 10
    16bc:	26 9f       	mul	r18, r22
    16be:	11 24       	eor	r1, r1
    16c0:	30 19       	sub	r19, r0
    16c2:	30 5d       	subi	r19, 0xD0	; 208
    16c4:	31 93       	st	Z+, r19
    16c6:	de f6       	brtc	.-74     	; 0x167e <__ultoa_invert+0xe>
    16c8:	cf 01       	movw	r24, r30
    16ca:	08 95       	ret
    16cc:	46 2f       	mov	r20, r22
    16ce:	47 70       	andi	r20, 0x07	; 7
    16d0:	40 5d       	subi	r20, 0xD0	; 208
    16d2:	41 93       	st	Z+, r20
    16d4:	b3 e0       	ldi	r27, 0x03	; 3
    16d6:	0f d0       	rcall	.+30     	; 0x16f6 <__ultoa_invert+0x86>
    16d8:	c9 f7       	brne	.-14     	; 0x16cc <__ultoa_invert+0x5c>
    16da:	f6 cf       	rjmp	.-20     	; 0x16c8 <__ultoa_invert+0x58>
    16dc:	46 2f       	mov	r20, r22
    16de:	4f 70       	andi	r20, 0x0F	; 15
    16e0:	40 5d       	subi	r20, 0xD0	; 208
    16e2:	4a 33       	cpi	r20, 0x3A	; 58
    16e4:	18 f0       	brcs	.+6      	; 0x16ec <__ultoa_invert+0x7c>
    16e6:	49 5d       	subi	r20, 0xD9	; 217
    16e8:	31 fd       	sbrc	r19, 1
    16ea:	40 52       	subi	r20, 0x20	; 32
    16ec:	41 93       	st	Z+, r20
    16ee:	02 d0       	rcall	.+4      	; 0x16f4 <__ultoa_invert+0x84>
    16f0:	a9 f7       	brne	.-22     	; 0x16dc <__ultoa_invert+0x6c>
    16f2:	ea cf       	rjmp	.-44     	; 0x16c8 <__ultoa_invert+0x58>
    16f4:	b4 e0       	ldi	r27, 0x04	; 4
    16f6:	a6 95       	lsr	r26
    16f8:	97 95       	ror	r25
    16fa:	87 95       	ror	r24
    16fc:	77 95       	ror	r23
    16fe:	67 95       	ror	r22
    1700:	ba 95       	dec	r27
    1702:	c9 f7       	brne	.-14     	; 0x16f6 <__ultoa_invert+0x86>
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	61 05       	cpc	r22, r1
    1708:	71 05       	cpc	r23, r1
    170a:	08 95       	ret
    170c:	9b 01       	movw	r18, r22
    170e:	ac 01       	movw	r20, r24
    1710:	0a 2e       	mov	r0, r26
    1712:	06 94       	lsr	r0
    1714:	57 95       	ror	r21
    1716:	47 95       	ror	r20
    1718:	37 95       	ror	r19
    171a:	27 95       	ror	r18
    171c:	ba 95       	dec	r27
    171e:	c9 f7       	brne	.-14     	; 0x1712 <__ultoa_invert+0xa2>
    1720:	62 0f       	add	r22, r18
    1722:	73 1f       	adc	r23, r19
    1724:	84 1f       	adc	r24, r20
    1726:	95 1f       	adc	r25, r21
    1728:	a0 1d       	adc	r26, r0
    172a:	08 95       	ret

0000172c <__prologue_saves__>:
    172c:	2f 92       	push	r2
    172e:	3f 92       	push	r3
    1730:	4f 92       	push	r4
    1732:	5f 92       	push	r5
    1734:	6f 92       	push	r6
    1736:	7f 92       	push	r7
    1738:	8f 92       	push	r8
    173a:	9f 92       	push	r9
    173c:	af 92       	push	r10
    173e:	bf 92       	push	r11
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	ca 1b       	sub	r28, r26
    1756:	db 0b       	sbc	r29, r27
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	09 94       	ijmp

00001764 <__epilogue_restores__>:
    1764:	2a 88       	ldd	r2, Y+18	; 0x12
    1766:	39 88       	ldd	r3, Y+17	; 0x11
    1768:	48 88       	ldd	r4, Y+16	; 0x10
    176a:	5f 84       	ldd	r5, Y+15	; 0x0f
    176c:	6e 84       	ldd	r6, Y+14	; 0x0e
    176e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1770:	8c 84       	ldd	r8, Y+12	; 0x0c
    1772:	9b 84       	ldd	r9, Y+11	; 0x0b
    1774:	aa 84       	ldd	r10, Y+10	; 0x0a
    1776:	b9 84       	ldd	r11, Y+9	; 0x09
    1778:	c8 84       	ldd	r12, Y+8	; 0x08
    177a:	df 80       	ldd	r13, Y+7	; 0x07
    177c:	ee 80       	ldd	r14, Y+6	; 0x06
    177e:	fd 80       	ldd	r15, Y+5	; 0x05
    1780:	0c 81       	ldd	r16, Y+4	; 0x04
    1782:	1b 81       	ldd	r17, Y+3	; 0x03
    1784:	aa 81       	ldd	r26, Y+2	; 0x02
    1786:	b9 81       	ldd	r27, Y+1	; 0x01
    1788:	ce 0f       	add	r28, r30
    178a:	d1 1d       	adc	r29, r1
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	ed 01       	movw	r28, r26
    1798:	08 95       	ret

0000179a <_exit>:
    179a:	f8 94       	cli

0000179c <__stop_program>:
    179c:	ff cf       	rjmp	.-2      	; 0x179c <__stop_program>
